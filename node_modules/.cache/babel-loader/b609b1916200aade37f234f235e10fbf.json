{"ast":null,"code":"import ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport PostAPI from '@/api/PostAPI';\nexport default {\n  data() {\n    return {\n      editor: ClassicEditor,\n      editorData: '<p>Content of the editor.</p>',\n      currentItem: {},\n      styleCustom: {\n        'font-weight': 'bold!important;'\n      }\n    };\n  },\n\n  methods: {\n    buttonClick(action) {\n      let me = this;\n\n      switch (action) {\n        case 'Save':\n          // lưu vào csdl\n          me.savePost();\n          break;\n\n        case 'SaveTemp':\n          //lưu tạm                    \n          break;\n\n        default:\n          break;\n      }\n    },\n\n    async savePost(isTemp) {\n      let me = this;\n\n      if (me.validateBusiness()) {\n        me.prepareDataBeforeSave(isTemp);\n        let res = await PostAPI.request(PostAPI.urlName, 'POST', me.currentItem);\n\n        if (res) {\n          debugger;\n        }\n      }\n    },\n\n    prepareDataBeforeSave(isTemp) {\n      let me = this;\n      me.currentItem.posted_date = new Date();\n      me.currentItem.status = isTemp ? me.$enum.PostStatus.Temp : me.$enum.PostStatus.Posted;\n      me.currentItem.author = me.$session.get('UserID') ? me.$session.get('UserID') : \"\";\n    },\n\n    async validateBusiness() {\n      let me = this;\n\n      if (!me.currentItem.post_title) {\n        return false;\n      }\n\n      return true;\n    },\n\n    emptyEditor() {\n      this.editorData = '';\n    },\n\n    UploadAdapter: function (loader) {\n      this.loader = loader;\n      loader.file.then(response => {\n        let file = response;\n\n        this.upload = () => {\n          const body = new FormData();\n          body.append('file', this.loader.file);\n          return fetch('http://localhost:8000/api/imageUpload', {\n            headers: {\n              'Content-Type': \"multipart/form-data; charset=utf-8; boundary=\" + Math.random().toString().substr(2),\n              'Accept': 'application/json'\n            },\n            body: body,\n            method: 'post'\n          }).then(response => response.json()).then(downloadUrl => {\n            return {\n              default: downloadUrl\n            };\n          }).catch(error => {\n            console.error(error);\n          });\n        };\n\n        this.abort = () => {\n          console.log('Abort upload.');\n        };\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["ClassicEditor","PostAPI","data","editor","editorData","currentItem","styleCustom","methods","buttonClick","action","me","savePost","isTemp","validateBusiness","prepareDataBeforeSave","res","request","urlName","posted_date","Date","status","$enum","PostStatus","Temp","Posted","author","$session","get","post_title","emptyEditor","UploadAdapter","loader","file","then","response","upload","body","FormData","append","fetch","headers","Math","random","toString","substr","method","json","downloadUrl","default","catch","error","console","abort","log"],"sourceRoot":"","sources":["D:\\Traveller\\Traveller-Frontend\\traveller-ui\\src\\views\\post\\PostEditorDetail.vue"],"sourcesContent":["// Form CKEditor\r\n<template>\r\n  <div>\r\n    <div class=\"function-container\">\r\n        <div class=\"save-btn-container\">\r\n         <button\r\n            class=\"m-btn-second btn-save mr-2\"\r\n            @click=\"buttonClick('SaveTemp')\"                  \r\n        >\r\n            {{$t('SaveTemp')}}\r\n        </button>\r\n        <button\r\n            class=\"m-btn btn-save\"\r\n            @click=\"buttonClick('Save')\"                  \r\n        >\r\n            {{$t('Save')}}\r\n        </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"post-title\">\r\n        <input \r\n        class=\"input-title\"\r\n        type=\"text\"\r\n        v-model=\"currentItem.post_title\"\r\n        placeholder=\"Title\"/>\r\n        <!-- <m-input\r\n            ref=\"inputTitle\"\r\n            v-model=\"currentItem.post_title\"\r\n            placeholder=\"Tiêu đề\"\r\n            :style=\"{'width': 100 + 'px;'}\"\r\n            labelText=\"Tiêu đề\"\r\n        >\r\n\r\n        </m-input> -->\r\n    </div>\r\n    <ckeditor :editor=\"editor\"\r\n        v-model=\"currentItem.post_content\"\r\n        :upload-adapter=\"UploadAdapter\"\r\n        ref=\"editorComponent\"\r\n        class=\"editor-component\"\r\n    >\r\n    </ckeditor>\r\n    <button @click=\"emptyEditor\">Empty the editor</button>    \r\n    <code>{{ currentItem.post_content }}</code>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport PostAPI from '@/api/PostAPI';\r\nexport default {\r\n    data() {\r\n        return {\r\n            editor: ClassicEditor,\r\n            editorData: '<p>Content of the editor.</p>',\r\n            currentItem: {},\r\n            styleCustom:{\r\n                'font-weight': 'bold!important;',\r\n            },\r\n            \r\n        }\r\n    },\r\n    methods:{\r\n        \r\n        buttonClick(action){\r\n            let me = this;\r\n            switch (action) {\r\n                case 'Save':// lưu vào csdl\r\n                me.savePost() ;                   \r\n                    break;\r\n                case 'SaveTemp'://lưu tạm                    \r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        },\r\n\r\n        async savePost(isTemp){\r\n            let me = this;\r\n            if(me.validateBusiness()){\r\n                me.prepareDataBeforeSave(isTemp);\r\n                let res = await PostAPI.request(PostAPI.urlName, 'POST', me.currentItem);\r\n                if(res){\r\n                    debugger\r\n                }\r\n            }\r\n\r\n        },\r\n\r\n        prepareDataBeforeSave(isTemp){\r\n            let me = this;\r\n            me.currentItem.posted_date = new Date();\r\n            me.currentItem.status = isTemp? me.$enum.PostStatus.Temp : me.$enum.PostStatus.Posted; \r\n            me.currentItem.author = me.$session.get('UserID') ? me.$session.get('UserID') : \"\";\r\n        },\r\n\r\n        async validateBusiness(){\r\n            let me = this;\r\n            if(!me.currentItem.post_title){\r\n                return false;\r\n            }\r\n            return true;\r\n\r\n        },\r\n\r\n        emptyEditor() {\r\n            this.editorData = '';\r\n        },\r\n\r\n        UploadAdapter: function (loader) {\r\n            this.loader = loader;\r\n            loader.file.then(response =>{\r\n                let file = response;\r\n                this.upload = () => {\r\n                    const body = new FormData();\r\n                    body.append('file', this.loader.file);\r\n\r\n                    return fetch('http://localhost:8000/api/imageUpload', {\r\n                    headers: {\r\n                        'Content-Type': \"multipart/form-data; charset=utf-8; boundary=\" + Math.random().toString().substr(2),\r\n                        'Accept': 'application/json'\r\n                    },\r\n                    body: body,\r\n                    method: 'post'\r\n                            })\r\n                    .then(response => response.json())\r\n                    .then(downloadUrl => {\r\n                        return {\r\n                            default: downloadUrl\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        console.error(error);\r\n                    });\r\n                }\r\n                this.abort = () => {\r\n                    console.log('Abort upload.')\r\n                }\r\n            })\r\n            \r\n\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style>\r\n.function-container{\r\n    padding: 10px;\r\n}\r\n.save-btn-container{\r\n    display: flex;\r\n    justify-content: flex-end;\r\n}\r\n.post-title{\r\n    width: 100%;\r\n}\r\n.post-title .input-title{\r\n    width: 100%;\r\n    outline: none;\r\n    font-family: inherit;    \r\n    font-weight: bold;\r\n    padding: 10px;\r\n}\r\n.input-title-custom{\r\n    border-radius: 0!important;\r\n}\r\n\r\n.editor-component{\r\n    height: 100vh;\r\n}\r\n.ck-editor__editable {\r\n    min-height: 500px!important;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}
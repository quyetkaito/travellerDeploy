{"ast":null,"code":"const {\n  Buffer\n} = require('node:buffer');\n\nclass CommonFunction {\n  /**------------------------------------------\r\n  * Show biểu tượng loading toàn màn hình\r\n  * @created : quyetkaito (18/08/2022)\r\n  --------------------------------------------*/\n  load() {\n    let loading = document.getElementById('loading-bg');\n\n    if (loading) {\n      loading.style.display = 'block';\n    }\n  }\n  /**------------------------------------------\r\n  *  Ẩn biểu tượng loading toàn màn hình\r\n  * @created : quyetkaito (18/08/2022)\r\n  --------------------------------------------*/\n\n\n  unload() {\n    let loading = document.getElementById('loading-bg');\n\n    if (loading) {\n      loading.style.display = 'none';\n    }\n  }\n  /**---------------------------------\r\n   * Hàm validate định dạng email\r\n   * @param {String} email dạng chuỗi.\r\n   * Author: quyetkaito (25/02/2022)\r\n   -----------------------------------*/\n\n\n  validEmail(email) {\n    let re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }\n  /**\r\n   * Hàm chuyển string về dạng base64\r\n   * @param {String} string \r\n   * @returns \r\n   * @created : nvquyet 26/09/2022\r\n   */\n\n\n  convertToBase64(string) {\n    try {\n      if (string == null || typeof string == \"undefined\") {\n        return;\n      }\n\n      debugger;\n      const buff = Buffer.from(string);\n      const base64 = buff.toString('base64');\n      return base64;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  /**------------------------------------------\r\n  * Hàm convert base64 về lại string\r\n  * @created : quyetkaito (26/09/2022)\r\n  * @param {String} base64String: chuỗi base64 cần giải mã\r\n  --------------------------------------------*/\n\n\n  decodeBase64(base64String) {\n    try {\n      const buff = Buffer.from(base64String, 'base64');\n      const str = buff.toString('utf-8');\n      return str;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n}\n\nexport default new CommonFunction();","map":{"version":3,"names":["Buffer","require","CommonFunction","load","loading","document","getElementById","style","display","unload","validEmail","email","re","test","convertToBase64","string","buff","from","base64","toString","error","console","log","decodeBase64","base64String","str"],"sources":["D:/Traveller/Traveller-Frontend/traveller-ui/src/script/commonFunc.js"],"sourcesContent":["const { Buffer } = require('node:buffer');\r\nclass CommonFunction {    \r\n    /**------------------------------------------\r\n    * Show biểu tượng loading toàn màn hình\r\n    * @created : quyetkaito (18/08/2022)\r\n    --------------------------------------------*/\r\n    load() {\r\n        let loading = document.getElementById('loading-bg');\r\n        if (loading) {\r\n            loading.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    /**------------------------------------------\r\n    *  Ẩn biểu tượng loading toàn màn hình\r\n    * @created : quyetkaito (18/08/2022)\r\n    --------------------------------------------*/\r\n    unload() {\r\n        let loading = document.getElementById('loading-bg');\r\n        if (loading) {\r\n            loading.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    /**---------------------------------\r\n     * Hàm validate định dạng email\r\n     * @param {String} email dạng chuỗi.\r\n     * Author: quyetkaito (25/02/2022)\r\n     -----------------------------------*/\r\n    validEmail(email) {\r\n        let re =\r\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(email);\r\n    }\r\n\r\n    /**\r\n     * Hàm chuyển string về dạng base64\r\n     * @param {String} string \r\n     * @returns \r\n     * @created : nvquyet 26/09/2022\r\n     */\r\n    convertToBase64(string) {\r\n        try {\r\n            if (string == null || typeof string == \"undefined\") {\r\n                return;\r\n            }\r\n            debugger\r\n            const buff = Buffer.from(string);\r\n            const base64 = buff.toString('base64');\r\n            return base64;\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    /**------------------------------------------\r\n    * Hàm convert base64 về lại string\r\n    * @created : quyetkaito (26/09/2022)\r\n    * @param {String} base64String: chuỗi base64 cần giải mã\r\n    --------------------------------------------*/\r\n    decodeBase64(base64String) {\r\n        try {\r\n            const buff = Buffer.from(base64String, 'base64');\r\n            const str = buff.toString('utf-8');\r\n            return str;\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\nexport default new CommonFunction();"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAMC,cAAN,CAAqB;EACjB;AACJ;AACA;AACA;EACIC,IAAI,GAAG;IACH,IAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAd;;IACA,IAAIF,OAAJ,EAAa;MACTA,OAAO,CAACG,KAAR,CAAcC,OAAd,GAAwB,OAAxB;IACH;EACJ;EAED;AACJ;AACA;AACA;;;EACIC,MAAM,GAAG;IACL,IAAIL,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAd;;IACA,IAAIF,OAAJ,EAAa;MACTA,OAAO,CAACG,KAAR,CAAcC,OAAd,GAAwB,MAAxB;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACIE,UAAU,CAACC,KAAD,EAAQ;IACd,IAAIC,EAAE,GACF,uJADJ;IAEA,OAAOA,EAAE,CAACC,IAAH,CAAQF,KAAR,CAAP;EACH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIG,eAAe,CAACC,MAAD,EAAS;IACpB,IAAI;MACA,IAAIA,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,IAAiB,WAAvC,EAAoD;QAChD;MACH;;MACD;MACA,MAAMC,IAAI,GAAGhB,MAAM,CAACiB,IAAP,CAAYF,MAAZ,CAAb;MACA,MAAMG,MAAM,GAAGF,IAAI,CAACG,QAAL,CAAc,QAAd,CAAf;MACA,OAAOD,MAAP;IACH,CARD,CAQE,OAAOE,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;;;EACIG,YAAY,CAACC,YAAD,EAAe;IACvB,IAAI;MACA,MAAMR,IAAI,GAAGhB,MAAM,CAACiB,IAAP,CAAYO,YAAZ,EAA0B,QAA1B,CAAb;MACA,MAAMC,GAAG,GAAGT,IAAI,CAACG,QAAL,CAAc,OAAd,CAAZ;MACA,OAAOM,GAAP;IACH,CAJD,CAIE,OAAOL,KAAP,EAAc;MACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACH;EACJ;;AAnEgB;;AAqErB,eAAe,IAAIlB,cAAJ,EAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { defineComponent } from 'vue';\nimport { DoughnutChart, BarChart, LineChart, PieChart } from 'vue-chart-3';\nimport { Chart, registerables } from \"chart.js\";\nimport CategoryAPI from \"@/api/CategoryAPI\";\nimport PostAPI from \"@/api/PostAPI\";\n\nconst randomNum = () => Math.floor(Math.random() * (235 - 52 + 1) + 52);\n\nconst randomRGB = () => `rgb(${randomNum()}, ${randomNum()}, ${randomNum()})`;\n\nChart.register(...registerables);\nexport default defineComponent({\n  name: 'DashboardView',\n\n  /* eslint-disable */\n  components: {\n    DoughnutChart,\n    BarChart,\n    LineChart,\n    PieChart\n  },\n\n  data() {\n    return {\n      categoryData: [],\n      postData: []\n    };\n  },\n\n  setup() {\n    const testData = {\n      labels: ['Paris', 'Nîmes', 'Toulon', 'Perpignan', 'Autre'],\n      datasets: [{\n        label: \"Biểu đồ test\",\n        data: [30, 40, 60, 70, 150],\n        backgroundColor: ['#77CEFF', '#0079AF', '#123E6B', '#97B0C4', '#A5C8ED']\n      }]\n    };\n    return {\n      testData\n    };\n  },\n\n  mounted() {\n    this.getData();\n  },\n\n  methods: {\n    async getData() {\n      await this.getDataCategory();\n      await this.getDataPost();\n    },\n\n    async getDataPost(fromDate, toDate) {\n      try {\n        if (!fromDate) fromDate = \"2022-01-01\";\n        if (!toDate) toDate = '2022-12-31';\n        let res = await PostAPI.request(PostAPI.urlName + `/get_data_chart?from_date=${fromDate}&to_date=${toDate}`, 'GET');\n\n        if (res && res.data) {\n          debugger;\n\n          if (res.data.length > 0) {\n            let t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;\n            t1 = t2 = t3 = t4 = t5 = t6 = t7 = t8 = t9 = t10 = t11 = t12 = 0;\n            res.data.forEach(element => {\n              if (element.posted_date) {\n                switch (new Date(element.posted_date).getMonth() + 1) {\n                  case 1:\n                    t1++;\n                    break;\n\n                  case 2:\n                    t2++;\n                    break;\n\n                  case 3:\n                    t3++;\n                    break;\n\n                  case 4:\n                    t4++;\n                    break;\n\n                  case 5:\n                    t5++;\n                    break;\n\n                  case 6:\n                    t6++;\n                    break;\n\n                  case 7:\n                    t7++;\n                    break;\n\n                  case 8:\n                    t8++;\n                    break;\n\n                  case 9:\n                    t9++;\n                    break;\n\n                  case 10:\n                    t10++;\n                    break;\n\n                  case 11:\n                    t11++;\n                    break;\n\n                  case 12:\n                    t12++;\n                    break;\n\n                  default:\n                    break;\n                }\n              }\n            });\n            this.postData = {\n              labels: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n              //theo tháng\n              datasets: [{\n                label: 'Dữ liệu bài viết được đăng theo tháng',\n                data: [t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12]\n              }],\n              options: {\n                maintainAspectRatio: false,\n                scales: {\n                  x: {\n                    title: {\n                      display: true,\n                      text: 'seconds'\n                    }\n                  }\n                }\n              }\n            };\n            debugger;\n          }\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    async getDataCategory() {\n      try {\n        let res = await CategoryAPI.request(CategoryAPI.urlName + \"/common_category\", 'GET');\n\n        if (res && res.data) {\n          this.categoryData = {\n            labels: res.data.map(x => x.category_name),\n            datasets: [{\n              label: 'Dữ liệu danh mục được sử dụng',\n              data: res.data.map(x => x.amount),\n              backgroundColor: [...Array(res.data.length)].map(x => randomRGB())\n            }] // options: {\n            //     maintainAspectRatio: false,\n            // }\n\n          };\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","DoughnutChart","BarChart","LineChart","PieChart","Chart","registerables","CategoryAPI","PostAPI","randomNum","Math","floor","random","randomRGB","register","name","components","data","categoryData","postData","setup","testData","labels","datasets","label","backgroundColor","mounted","getData","methods","getDataCategory","getDataPost","fromDate","toDate","res","request","urlName","length","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","forEach","element","posted_date","Date","getMonth","options","maintainAspectRatio","scales","x","title","display","text","error","console","map","category_name","amount","Array"],"sourceRoot":"","sources":["D:\\Traveller\\Traveller-Frontend\\traveller-ui\\src\\views\\dashboard\\DashboardView.vue"],"sourcesContent":["<template>\r\n<div class=\"dashboard-view\">\r\n    <div class=\"chart-row w-full\">\r\n        <div class=\"chart-card\">\r\n            <BarChart :chartData=\"categoryData\" :height=\"200\"/>\r\n            <div class=\"chart-description\">Biểu đồ thống kê danh mục phổ biến hiện tại\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"w-full flex chart-row\">    \r\n        <div class=\"chart-card w-2/3\">\r\n            <LineChart :chartData=\"postData\" :height=\"300\" />\r\n        </div>\r\n        <div class=\"chart-card w-1/3\">\r\n            <PieChart :chartData=\"testData\" :height=\"300\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"chart-row\">\r\n        <div class=\"chart-card w-1/3\">\r\n            <DoughnutChart :chartData=\"testData\" />\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue';\r\nimport { DoughnutChart, BarChart, LineChart, PieChart } from 'vue-chart-3';\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport CategoryAPI from \"@/api/CategoryAPI\"\r\nimport PostAPI from \"@/api/PostAPI\"\r\nconst randomNum = () => Math.floor(Math.random() * (235 - 52 + 1) + 52);\r\nconst randomRGB = () => `rgb(${randomNum()}, ${randomNum()}, ${randomNum()})`;\r\nChart.register(...registerables);\r\n\r\nexport default defineComponent({\r\n  name: 'DashboardView',\r\n  /* eslint-disable */\r\n  components: { DoughnutChart , BarChart, LineChart, PieChart},\r\n  data() {\r\n    return {\r\n        categoryData: [],\r\n        postData: [],\r\n    }\r\n  },\r\n  setup() {\r\n    const testData = {\r\n      labels: ['Paris', 'Nîmes', 'Toulon', 'Perpignan', 'Autre'],\r\n      datasets: [\r\n        {\r\n          label: \"Biểu đồ test\",\r\n          data: [30, 40, 60, 70, 150],\r\n          backgroundColor: ['#77CEFF', '#0079AF', '#123E6B', '#97B0C4', '#A5C8ED'],\r\n        },\r\n      ],\r\n    };\r\n\r\n    return { testData };\r\n  },\r\n  mounted(){\r\n    this.getData();\r\n  },\r\n  methods:{\r\n    async getData(){\r\n        await this.getDataCategory();\r\n        await this.getDataPost();\r\n    },\r\n\r\n    async getDataPost(fromDate, toDate){\r\n        try {            \r\n            if(!fromDate) fromDate = \"2022-01-01\";\r\n            if(!toDate) toDate = '2022-12-31'\r\n            let res = await PostAPI.request(PostAPI.urlName+`/get_data_chart?from_date=${fromDate}&to_date=${toDate}`, 'GET');\r\n            if(res && res.data){\r\n                debugger\r\n                if(res.data.length > 0){\r\n                    let t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12;\r\n                    t1=t2=t3=t4=t5=t6=t7=t8=t9=t10=t11=t12 = 0;\r\n                    res.data.forEach(element => {\r\n                         if(element.posted_date){\r\n                            switch (new Date(element.posted_date).getMonth()+1) {\r\n                                case 1:\r\n                                    t1++;\r\n                                    break;\r\n                                case 2:\r\n                                    t2++;\r\n                                    break;\r\n                                    case 3:\r\n                                    t3++;\r\n                                    break;\r\n                                    case 4:\r\n                                    t4++;\r\n                                    break;\r\n                                    case 5:\r\n                                    t5++;\r\n                                    break;\r\n                                    case 6:\r\n                                    t6++;\r\n                                    break;\r\n                                    case 7:\r\n                                    t7++;\r\n                                    break;\r\n                                    case 8:\r\n                                    t8++;\r\n                                    break;\r\n                                    case 9:\r\n                                    t9++;\r\n                                    break;\r\n                                    case 10:\r\n                                    t10++;\r\n                                    break;\r\n                                    case 11:\r\n                                    t11++;\r\n                                    break;\r\n                                    case 12:\r\n                                    t12++;\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                         }                          \r\n                    });                                        \r\n                    this.postData = {                   \r\n                        labels: [1,2,3,4,5,6,7,8,9,10,11,12], //theo tháng\r\n                        datasets:[{\r\n                            label: 'Dữ liệu bài viết được đăng theo tháng',\r\n                            data: [t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12]                        \r\n                        }                        \r\n                        ],\r\n                        options: {\r\n                            maintainAspectRatio: false,\r\n                            scales: {x: { title: { display: true, text: 'seconds' }}}\r\n                        }\r\n\r\n                    }\r\n                    debugger\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    },\r\n\r\n     async getDataCategory(){\r\n        try {\r\n            let res = await CategoryAPI.request(CategoryAPI.urlName+\"/common_category\", 'GET');\r\n            if(res && res.data){\r\n                this.categoryData = {\r\n                    labels: res.data.map(x=>x.category_name),\r\n                    datasets:[{\r\n                        label: 'Dữ liệu danh mục được sử dụng',\r\n                        data: res.data.map(x=>x.amount),\r\n                        backgroundColor: [...Array(res.data.length)].map(x=>randomRGB())\r\n                    }                        \r\n                    ],\r\n                    // options: {\r\n                    //     maintainAspectRatio: false,\r\n                    // }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n     }\r\n  }\r\n});\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.dashboard-view{\r\n    .chart-row{\r\n        // height: 200px;\r\n    }\r\n    .chart-card{\r\n        padding: 10px;\r\n         @apply shadow-sm;\r\n        border-radius: 5px;\r\n        background-color: #ffffff;\r\n        border: 2px solid #C7BFB7;    \r\n        margin: 10px;          \r\n        \r\n        .chart-description{\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            font-style: italic;\r\n        }\r\n    }\r\n    \r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}
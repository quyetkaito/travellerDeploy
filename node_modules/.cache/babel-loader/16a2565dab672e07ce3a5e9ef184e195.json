{"ast":null,"code":"import * as base from \"@/script/base\";\nexport default {\n  name: \"MInput\",\n  emits: [\"update:modelValue\", \"checkBlur\", \"blur\", \"onChange\"],\n\n  data() {\n    return {\n      full: \"width:100%\",\n      inputType: this.type\n    };\n  },\n\n  props: {\n    maxHeight: {\n      type: [Number, String],\n      default: 40\n    },\n    viewPassword: {\n      //có cho phép xem mật khẩu không\n      type: Boolean,\n      default: true\n    },\n    readonly: {\n      //chỉ xem\n      type: Boolean,\n      default: false\n    },\n    //input có label hay không?\n    showLabel: {\n      type: Boolean,\n      default: true\n    },\n    //label của input là gì\n    labelText: {\n      type: String,\n      default: \"label-text\"\n    },\n    //label đầy đủ của input là gì\n    labelTextFull: {\n      type: String,\n      default: \"\"\n    },\n    //hiện title khi hover cho label viết tắt\n    labelTitle: {\n      type: String,\n      default: null\n    },\n    //loại input\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    //placeholder của input\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    //input này có bắt buộc không?\n    required: {\n      type: Boolean,\n      default: false\n    },\n    //kí hiệu bắt buộc là gì?\n    requiredSymbol: {\n      type: String,\n      default: \"*\"\n    },\n    //input này có icon không?\n    isHasIcon: {\n      type: Boolean,\n      default: false\n    },\n    //chiều rộng là bao nhiêu? mặc định 100% chiều dài phần tử cha\n    width: {\n      type: [Number, String],\n      default: 'fit-content'\n    },\n    //chiều cao của input là bao nhiêu?\n    height: {\n      type: [Number, String],\n      default: 40\n    },\n    //số ký tự có thể nhập là bao nhiêu?\n    maxlength: {\n      type: Number,\n      default: 255\n    },\n    //giá trị khởi tạo cho input\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    //thêm class lỗi nếu lỗi\n    isError: {\n      type: Boolean,\n      default: false\n    },\n    //có phải input dạng số hay không?\n    isNumberInput: {\n      type: Boolean,\n      default: false\n    },\n    //có phải input dạng text area không?\n    isTextArea: {\n      type: Boolean,\n      default: false\n    },\n    //name của input\n    name: {\n      type: String,\n      default: \"\"\n    },\n    //input có bị disabled ko?\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    //binding nhiều style\n    style: {\n      type: [String, Object],\n      default: null\n    },\n    tabindex: {\n      type: [Number, String],\n      default: null\n    }\n  },\n  methods: {\n    /**\r\n    * thay đổi trạng thái ẩn hiện của mật khẩu\r\n    * @created : quyetkaito 08/10/2022\r\n    */\n    togglePassword() {\n      if (this.inputType == 'password') this.inputType = 'text';else if (this.inputType == 'text') this.inputType = 'password';\n    },\n\n    /**----------------------------------\r\n     * Hàm gửi dữ liệu tới component cha\r\n     * và xử lý dữ liệu.\r\n     * Author: quyetkaito (25/02/2022)\r\n    -------------------------------------*/\n    sendChange(event) {\n      try {\n        //khi nhập thì bỏ error border\n        this.removeError(); //nếu là dạng số thì format\n\n        if (this.isNumberInput) {\n          //gọi hàm format định dạng số ngay khi nhập liệu từ base\n          this.onNumberInput(event);\n        }\n\n        this.$emit(\"onChange\", true);\n        this.$emit(\"update:modelValue\", event.target.value);\n      } catch (error) {\n        //log ra lỗi\n        console.error(error);\n      }\n    },\n\n    /**-----------------------------------------------------------\r\n    * Hàm thực hiện format định dạng số ngay trong khi nhập liệu.\r\n    * @param {Event} event \r\n    * Author: quyetkaito (27/03/2022).\r\n    -----------------------------------*/\n    onNumberInput(event) {\n      try {\n        //lấy ra giá trị của ô input hiện tại\n        let value = event.target.value; // console.log(\"ô input hiện tại: \", value);\n\n        if (event.data == \",\") {\n          //nếu người dùng nhập dấu ',' và không có dấu ',' nào đã tồn tại => đang nhập số thập phân\n          if ((value.match(/,/g) || []).length <= 1) {\n            // console.log(\"chưa phải số thập phân\");\n            return; //cho nhập liệu tiếp\n          }\n        } //format số\n\n\n        event.target.value = base.formatCurrency(value);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n\n    /**--------------------------------\r\n     * Hàm dùng để focus vào input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    ----------------------------------*/\n    focus: function () {\n      this.$nextTick(function () {\n        this.$refs.input.focus();\n      });\n    },\n\n    /**------------------------------------\r\n     * Hàm dùng để thêm css lỗi cho input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    --------------------------------------*/\n    addError: function () {\n      this.$refs.input.classList.add(\"error\");\n      this.$refs.input.setAttribute(\"title\", `${this.labelText} không được bỏ trống`);\n    },\n\n    /**--------------------------\r\n     * Hàm thêm border đỏ cho input\r\n     * Author: quyetkaito (20/03/2022)\r\n     -------------------------*/\n    addRedBorder: function () {\n      if (this.$refs.input && this.$refs.input.classList) {\n        this.$refs.input.classList.add(\"error\");\n      }\n    },\n\n    /**------------------------------------\r\n     * Hàm dùng để bỏ css lỗi cho input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    --------------------------------------*/\n    removeError: function () {\n      if (this.$refs.input && this.$refs.input.classList) {\n        this.$refs.input.classList.remove(\"error\");\n        this.$refs.input.setAttribute(\"title\", \"\");\n      }\n    },\n\n    /**-------------------------------\r\n     * Hàm lấy ra tiêu đề của input.\r\n     * Author: quyetkaito (03/03/2022)\r\n     ---------------------------------*/\n    getTitle: function () {\n      return this.labelText;\n    },\n\n    setEmptyTooltip() {\n      this.$refs.input.setAttribute(\"title\", `${this.labelText} không được bỏ trống`);\n    },\n\n    setTooltip(message) {\n      this.$refs.input.setAttribute(\"title\", message);\n    },\n\n    setErrorTooltip(message) {\n      this.$refs.input.setAttribute(\"title\", message);\n      this.$nextTick(() => {\n        this.$refs.input.addRedBorder;\n      });\n    }\n\n  }\n};","map":{"version":3,"mappings":"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","names":["base","name","emits","data","full","inputType","type","props","maxHeight","Number","String","default","viewPassword","Boolean","readonly","showLabel","labelText","labelTextFull","labelTitle","placeholder","required","requiredSymbol","isHasIcon","width","height","maxlength","modelValue","isError","isNumberInput","isTextArea","disabled","style","Object","tabindex","methods","togglePassword","sendChange","event","removeError","onNumberInput","$emit","target","value","error","console","match","length","formatCurrency","focus","$nextTick","$refs","input","addError","classList","add","setAttribute","addRedBorder","remove","getTitle","setEmptyTooltip","setTooltip","message","setErrorTooltip"],"sourceRoot":"","sources":["D:\\Traveller\\Traveller-Frontend\\traveller-ui\\src\\components\\m-input\\MInput.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <label for=\"\" class=\"m-label\" v-show=\"showLabel\" :title=\"labelTextFull\">\r\n      {{ labelText }}\r\n      <span class=\"require-mark\" v-show=\"required\">{{requiredSymbol}}</span>\r\n    </label>\r\n    <div style=\"position: relative\">\r\n      <!-- Nếu là input bình thường -->\r\n      <div class=\"flex align-y-center\" v-if=\"!isTextArea\">\r\n        <input\r\n          ref=\"input\"\r\n          :type=\"inputType\"\r\n          :name=\"name\"\r\n          :readonly=\"readonly\"\r\n          :maxlength=\"maxlength\"\r\n          :disabled=\"disabled\"\r\n          :tabindex=\"tabindex\"\r\n          class=\"m-input\"\r\n          :value=\"modelValue\"\r\n          @input=\"sendChange\"\r\n          :style=\"{ height: height + 'px', style }\"\r\n          v-bind:class=\"{\r\n            'm-input-icon': isHasIcon,\r\n            error: isError,\r\n            'text-align-right': isNumberInput, //căn phải nếu là số\r\n            'disabled' : disabled || readonly\r\n          }\"\r\n          :placeholder=\"placeholder\"\r\n          @blur=\"$emit('blur', $event)\"\r\n          @change=\"$emit('onChange', modelValue)\"\r\n        />\r\n        <div\r\n          class=\"m-search m-icon m-icon-16 m-icon-search\"\r\n          v-show=\"isHasIcon\"\r\n          @click=\"$emit('findData')\"\r\n        ></div>\r\n        <div\r\n          class=\"m-search m-icon m-icon-24\"\r\n          :class=\"inputType=='password'?'m-unview': 'm-view'\"\r\n          v-if=\"type=='password' && viewPassword\"          \r\n          @click=\"togglePassword\"          \r\n        ></div>\r\n      </div>\r\n\r\n      <!-- Nếu là textarea -->\r\n      <div class=\"flex align-y-center\" v-if=\"isTextArea\">\r\n        <textarea\r\n          ref=\"input\"\r\n          class=\"m-input m-textarea\"\r\n          :placeholder=\"placeholder\"\r\n          :style=\"{ height: height + 'px!important', style, 'max-height': maxHeight + 'px!important'}\"\r\n          @input=\"sendChange\"\r\n          :value=\"modelValue\"\r\n          @change=\"$emit('onChange', modelValue)\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as base from \"@/script/base\";\r\n\r\nexport default {\r\n  name: \"MInput\",\r\n  emits: [\"update:modelValue\", \"checkBlur\", \"blur\", \"onChange\"],\r\n  data() {\r\n    return {\r\n      full: \"width:100%\",\r\n      inputType : this.type,\r\n    };\r\n  },\r\n  props: {\r\n    maxHeight:{\r\n      type: [Number,String],\r\n      default: 40,\r\n    },\r\n    viewPassword:{ //có cho phép xem mật khẩu không\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    readonly:{  //chỉ xem\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //input có label hay không?\r\n    showLabel: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n    //label của input là gì\r\n    labelText: {\r\n      type: String,\r\n      default: \"label-text\",\r\n    },\r\n    //label đầy đủ của input là gì\r\n    labelTextFull: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    //hiện title khi hover cho label viết tắt\r\n    labelTitle: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n    //loại input\r\n    type: {\r\n      type: String,\r\n      default: \"text\",\r\n    },\r\n    //placeholder của input\r\n    placeholder: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    //input này có bắt buộc không?\r\n    required: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //kí hiệu bắt buộc là gì?\r\n    requiredSymbol:{\r\n      type: String,\r\n      default: \"*\",\r\n    },\r\n    //input này có icon không?\r\n    isHasIcon: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //chiều rộng là bao nhiêu? mặc định 100% chiều dài phần tử cha\r\n    width: {\r\n      type: [Number,String],\r\n      default: 'fit-content',\r\n    },\r\n\r\n    //chiều cao của input là bao nhiêu?\r\n    height: {\r\n      type: [Number,String],\r\n      default: 40,\r\n    },\r\n    //số ký tự có thể nhập là bao nhiêu?\r\n    maxlength: {\r\n      type: Number,\r\n      default: 255,\r\n    },\r\n    //giá trị khởi tạo cho input\r\n    modelValue: {\r\n      type: [String, Number],\r\n      default: \"\",\r\n    },\r\n    //thêm class lỗi nếu lỗi\r\n    isError: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //có phải input dạng số hay không?\r\n    isNumberInput: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //có phải input dạng text area không?\r\n    isTextArea: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //name của input\r\n    name: {\r\n      type: String,\r\n      default: \"\",\r\n    },\r\n    //input có bị disabled ko?\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    //binding nhiều style\r\n    style:{\r\n      type: [String,Object],\r\n      default: null\r\n    },\r\n    tabindex:{\r\n      type: [Number,String],\r\n      default:null\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n    * thay đổi trạng thái ẩn hiện của mật khẩu\r\n    * @created : quyetkaito 08/10/2022\r\n    */\r\n    togglePassword(){\r\n      if(this.inputType == 'password') this.inputType = 'text';\r\n      else if(this.inputType == 'text') this.inputType = 'password';\r\n    },\r\n    /**----------------------------------\r\n     * Hàm gửi dữ liệu tới component cha\r\n     * và xử lý dữ liệu.\r\n     * Author: quyetkaito (25/02/2022)\r\n    -------------------------------------*/\r\n    sendChange(event) {\r\n      try {\r\n        //khi nhập thì bỏ error border\r\n        this.removeError();\r\n        //nếu là dạng số thì format\r\n        if (this.isNumberInput) {\r\n          //gọi hàm format định dạng số ngay khi nhập liệu từ base\r\n          this.onNumberInput(event);\r\n        }\r\n        this.$emit(\"onChange\", true);\r\n        this.$emit(\"update:modelValue\", event.target.value);\r\n      } catch (error) {\r\n        //log ra lỗi\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    /**-----------------------------------------------------------\r\n * Hàm thực hiện format định dạng số ngay trong khi nhập liệu.\r\n * @param {Event} event \r\n * Author: quyetkaito (27/03/2022).\r\n -----------------------------------*/\r\n    onNumberInput(event) {\r\n      try {\r\n        //lấy ra giá trị của ô input hiện tại\r\n        let value = event.target.value;\r\n        // console.log(\"ô input hiện tại: \", value);\r\n        if (event.data == \",\") {\r\n          //nếu người dùng nhập dấu ',' và không có dấu ',' nào đã tồn tại => đang nhập số thập phân\r\n          if ((value.match(/,/g) || []).length <= 1) {\r\n            // console.log(\"chưa phải số thập phân\");\r\n            return; //cho nhập liệu tiếp\r\n          }\r\n        }\r\n        //format số\r\n        event.target.value = base.formatCurrency(value);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    /**--------------------------------\r\n     * Hàm dùng để focus vào input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    ----------------------------------*/  \r\n    focus: function () {\r\n      this.$nextTick(function () {\r\n        this.$refs.input.focus()\r\n      });\r\n    },\r\n\r\n    /**------------------------------------\r\n     * Hàm dùng để thêm css lỗi cho input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    --------------------------------------*/\r\n    addError: function () {\r\n      this.$refs.input.classList.add(\"error\");\r\n      this.$refs.input.setAttribute(\r\n        \"title\",\r\n        `${this.labelText} không được bỏ trống`\r\n      );\r\n    },\r\n\r\n    /**--------------------------\r\n     * Hàm thêm border đỏ cho input\r\n     * Author: quyetkaito (20/03/2022)\r\n     -------------------------*/\r\n    addRedBorder: function () {\r\n      if(this.$refs.input && this.$refs.input.classList){\r\n        this.$refs.input.classList.add(\"error\");\r\n      }\r\n    },\r\n\r\n    /**------------------------------------\r\n     * Hàm dùng để bỏ css lỗi cho input.\r\n     * Author: quyetkaito (03/03/2022)\r\n    --------------------------------------*/\r\n    removeError: function () {\r\n      if(this.$refs.input && this.$refs.input.classList){\r\n        this.$refs.input.classList.remove(\"error\");\r\n        this.$refs.input.setAttribute(\"title\", \"\");\r\n      }\r\n    },\r\n\r\n    /**-------------------------------\r\n     * Hàm lấy ra tiêu đề của input.\r\n     * Author: quyetkaito (03/03/2022)\r\n     ---------------------------------*/\r\n    getTitle: function () {\r\n      return this.labelText;\r\n    },\r\n\r\n    setEmptyTooltip(){\r\n      this.$refs.input.setAttribute(\"title\",`${this.labelText} không được bỏ trống`);\r\n    },\r\n\r\n    setTooltip(message){\r\n      this.$refs.input.setAttribute(\"title\", message);\r\n    },\r\n\r\n    setErrorTooltip(message){\r\n      this.$refs.input.setAttribute(\"title\", message);      \r\n      this.$nextTick(()=>{\r\n        this.$refs.input.addRedBorder;\r\n      });      \r\n    }\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n@import url(\"@/style/common/input.css\");\r\n.disabled{\r\n  background: #E0E0E0;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}
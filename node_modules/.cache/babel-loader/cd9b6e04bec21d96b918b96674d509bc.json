{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getBasePlacement(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref) {\n  let {\n    reference,\n    floating,\n    placement\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  let coords;\n\n  switch (getBasePlacement(placement)) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);\n      break;\n\n    case 'end':\n      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);\n      break;\n  }\n\n  return coords;\n}\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement({ ...rects,\n    placement\n  });\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    if (process.env.NODE_ENV !== \"production\") {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: data != null ? data : {}\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement({ ...rects,\n          placement: statefulPlacement\n        }));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nasync function detectOverflow(middlewareArguments, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingParents',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = await platform.getClippingClientRect({\n    element: (await platform.isElement(element)) ? element : element.contextElement || (await platform.getDocumentElement({\n      element: elements.floating\n    })),\n    boundary,\n    rootBoundary\n  });\n  const elementClientRect = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await platform.getOffsetParent({\n      element: elements.floating\n    }),\n    strategy\n  })); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const basePlacement = getBasePlacement(placement);\n    const axis = getMainAxisFromPlacement(basePlacement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions({\n      element\n    });\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await platform.getOffsetParent({\n      element\n    });\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\n\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects) {\n  const isStart = getAlignment(placement) === 'start';\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? isStart ? 'right' : 'left' : isStart ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\n\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst basePlacements = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + \"-start\", basePlacement + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getBasePlacement(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {\n        return {};\n      }\n\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;\n      const currentPlacement = placements[currentIndex];\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement\n        }\n      };\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip, _middlewareData$flip2;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement\n      } = middlewareArguments;\n\n      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {\n        return {};\n      }\n\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const basePlacement = getBasePlacement(placement);\n      const isBasePlacement = basePlacement === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[basePlacement]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip3;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$slice$;\n\n              const placement = (_overflowsData$slice$ = overflowsData.slice().sort((a, b) => a.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0) - b.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        return {\n          data: {\n            skip: true\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return basePlacements.some(side => overflow[side] >= 0);\n}\n\nconst hide = () => ({\n  name: 'hide',\n\n  async fn(modifierArguments) {\n    const referenceOverflow = await detectOverflow(modifierArguments, {\n      elementContext: 'reference'\n    });\n    const floatingAltOverflow = await detectOverflow(modifierArguments, {\n      altBoundary: true\n    });\n    const referenceHiddenOffsets = getSideOffsets(referenceOverflow, modifierArguments.rects.reference);\n    const escapedOffsets = getSideOffsets(floatingAltOverflow, modifierArguments.rects.floating);\n    const referenceHidden = isAnySideFullyClipped(referenceHiddenOffsets);\n    const escaped = isAnySideFullyClipped(escapedOffsets);\n    return {\n      data: {\n        referenceHidden,\n        referenceHiddenOffsets,\n        escaped,\n        escapedOffsets\n      }\n    };\n  }\n\n});\n\nfunction convertValueToCoords(_ref) {\n  let {\n    placement,\n    rects,\n    value\n  } = _ref;\n  const basePlacement = getBasePlacement(placement);\n  const multiplier = ['left', 'top'].includes(basePlacement) ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value;\n  const {\n    mainAxis,\n    crossAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    ...rawValue\n  };\n  return getMainAxisFromPlacement(basePlacement) === 'x' ? {\n    x: crossAxis,\n    y: mainAxis * multiplier\n  } : {\n    x: mainAxis * multiplier,\n    y: crossAxis\n  };\n}\n\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords({\n        placement,\n        rects,\n        value\n      });\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getBasePlacement(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getBasePlacement(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$size;\n\n      const {\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {\n        return {};\n      }\n\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const basePlacement = getBasePlacement(placement);\n      const isEnd = getAlignment(placement) === 'end';\n      let heightSide;\n      let widthSide;\n\n      if (basePlacement === 'top' || basePlacement === 'bottom') {\n        heightSide = basePlacement;\n        widthSide = isEnd ? 'left' : 'right';\n      } else {\n        widthSide = basePlacement;\n        heightSide = isEnd ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: true\n        }\n      };\n    }\n\n  };\n};\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$inlin, _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy,\n        middlewareData\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n\n      if ((_middlewareData$inlin = middlewareData.inline) != null && _middlewareData$inlin.skip) {\n        return {};\n      }\n\n      const fallback = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await platform.getOffsetParent({\n          element: elements.floating\n        }),\n        strategy\n      }));\n      const clientRects = Array.from((_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects({\n        element: elements.reference\n      }))) != null ? _await$platform$getCl : []);\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find; // Find the first rect in which the point is fully inside\n\n\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getBasePlacement(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftPlacement = getBasePlacement(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftPlacement ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: await platform.getElementRects({\n            reference: {\n              getBoundingClientRect\n            },\n            floating: elements.floating,\n            strategy\n          })\n        }\n      };\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getBasePlacement","placement","split","getAlignment","getMainAxisFromPlacement","includes","getLengthFromAxis","axis","computeCoordsFromPlacement","_ref","reference","floating","commonX","x","width","commonY","y","height","coords","mainAxis","length","computePosition","config","strategy","middleware","platform","process","env","NODE_ENV","console","error","join","filter","name","Error","rects","getElementRects","statefulPlacement","middlewareData","_debug_loop_count_","i","fn","nextX","nextY","data","reset","initialPlacement","elements","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","middlewareArguments","options","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingClientRect","isElement","contextElement","getDocumentElement","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","offsetParent","getOffsetParent","min","Math","max","within","min$1","value","max$1","arrow","warn","basePlacement","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","centerOffset","hash$1","getOppositePlacement","replace","matched","getAlignmentSides","isStart","mainAlignmentSide","main","cross","hash","start","end","getOppositeAlignmentPlacement","basePlacements","allPlacements","reduce","acc","concat","getPlacementList","alignment","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_middlewareData$autoP3","_middlewareData$autoP4","_middlewareData$autoP5","_placementsSortedByLe","detectOverflowOptions","skip","placements","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByLeastOverflow","slice","sort","a","b","placementThatFitsOnAllSides","find","every","getExpandedPlacements","oppositePlacement","flip","_middlewareData$flip","_middlewareData$flip2","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","flipAlignment","isBasePlacement","overflowsData","push","side","_middlewareData$flip$","_middlewareData$flip3","nextIndex","resetPlacement","_overflowsData$slice$","getSideOffsets","isAnySideFullyClipped","some","hide","modifierArguments","referenceOverflow","floatingAltOverflow","referenceHiddenOffsets","escapedOffsets","referenceHidden","escaped","convertValueToCoords","multiplier","rawValue","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","_middlewareData$offse3","_middlewareData$offse4","isOriginSide","size","_middlewareData$size","apply","isEnd","heightSide","widthSide","xMin","xMax","yMin","yMax","dimensions","inline","_middlewareData$inlin","_await$platform$getCl","fallback","clientRects","Array","from","getClientRects","getBoundingClientRect","_clientRects$find","firstRect","lastRect","isTop","isLeftPlacement","maxRight","map","minLeft","measureRects"],"sources":["D:/Traveller/Traveller-Frontend/traveller-ui/node_modules/@floating-ui/core/dist/floating-ui.core.esm.js"],"sourcesContent":["function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getBasePlacement(placement)) ? 'x' : 'y';\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction computeCoordsFromPlacement(_ref) {\n  let {\n    reference,\n    floating,\n    placement\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  let coords;\n\n  switch (getBasePlacement(placement)) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] = coords[mainAxis] - (reference[length] / 2 - floating[length] / 2);\n      break;\n\n    case 'end':\n      coords[mainAxis] = coords[mainAxis] + (reference[length] / 2 - floating[length] / 2);\n      break;\n  }\n\n  return coords;\n}\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n\n    if (middleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement`', 'middleware detected. This will lead to an infinite loop. Ensure only', 'one of either has been passed to the `middleware` array.'].join(' '));\n    }\n  }\n\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement({ ...rects,\n    placement\n  });\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let _debug_loop_count_ = 0;\n\n  for (let i = 0; i < middleware.length; i++) {\n    if (process.env.NODE_ENV !== \"production\") {\n      _debug_loop_count_++;\n\n      if (_debug_loop_count_ > 100) {\n        throw new Error(['Floating UI: The middleware lifecycle appears to be', 'running in an infinite loop. This is usually caused by a `reset`', 'continually being returned without a break condition.'].join(' '));\n      }\n    }\n\n    const {\n      name,\n      fn\n    } = middleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: data != null ? data : {}\n    };\n\n    if (reset) {\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement({ ...rects,\n          placement: statefulPlacement\n        }));\n      }\n\n      i = -1;\n      continue;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return { ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nasync function detectOverflow(middlewareArguments, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = middlewareArguments;\n  const {\n    boundary = 'clippingParents',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = await platform.getClippingClientRect({\n    element: (await platform.isElement(element)) ? element : element.contextElement || (await platform.getDocumentElement({\n      element: elements.floating\n    })),\n    boundary,\n    rootBoundary\n  });\n  const elementClientRect = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect: elementContext === 'floating' ? { ...rects.floating,\n      x,\n      y\n    } : rects.reference,\n    offsetParent: await platform.getOffsetParent({\n      element: elements.floating\n    }),\n    strategy\n  })); // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  return {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(middlewareArguments) {\n    // Since `element` is required, we don't Partial<> the type\n    const {\n      element,\n      padding = 0\n    } = options != null ? options : {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = middlewareArguments;\n\n    if (element == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n\n      return {};\n    }\n\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const basePlacement = getBasePlacement(placement);\n    const axis = getMainAxisFromPlacement(basePlacement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions({\n      element\n    });\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await platform.getOffsetParent({\n      element\n    });\n    const clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    const centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside of the floating element's bounds\n\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n    return {\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n\n});\n\nconst hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, matched => hash$1[matched]);\n}\n\nfunction getAlignmentSides(placement, rects) {\n  const isStart = getAlignment(placement) === 'start';\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? isStart ? 'right' : 'left' : isStart ? 'bottom' : 'top';\n\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, matched => hash[matched]);\n}\n\nconst basePlacements = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/basePlacements.reduce((acc, basePlacement) => acc.concat(basePlacement, basePlacement + \"-start\", basePlacement + \"-end\"), []);\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getBasePlacement(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _middlewareData$autoP3, _middlewareData$autoP4, _middlewareData$autoP5, _placementsSortedByLe;\n\n      const {\n        x,\n        y,\n        rects,\n        middlewareData,\n        placement\n      } = middlewareArguments;\n      const {\n        alignment = null,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$autoP = middlewareData.autoPlacement) != null && _middlewareData$autoP.skip) {\n        return {};\n      }\n\n      const placements = getPlacementList(alignment, autoAlignment, allowedPlacements);\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const currentIndex = (_middlewareData$autoP2 = (_middlewareData$autoP3 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP3.index) != null ? _middlewareData$autoP2 : 0;\n      const currentPlacement = placements[currentIndex];\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects); // Make `computeCoords` start from the right place\n\n      if (placement !== currentPlacement) {\n        return {\n          x,\n          y,\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getBasePlacement(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...((_middlewareData$autoP4 = (_middlewareData$autoP5 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP5.overflows) != null ? _middlewareData$autoP4 : []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1]; // There are more placements to check\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByLeastOverflow = allOverflows.slice().sort((a, b) => a.overflows[0] - b.overflows[0]);\n      const placementThatFitsOnAllSides = (_placementsSortedByLe = placementsSortedByLeastOverflow.find(_ref => {\n        let {\n          overflows\n        } = _ref;\n        return overflows.every(overflow => overflow <= 0);\n      })) == null ? void 0 : _placementsSortedByLe.placement;\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          placement: placementThatFitsOnAllSides != null ? placementThatFitsOnAllSides : placementsSortedByLeastOverflow[0].placement\n        }\n      };\n    }\n\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$flip, _middlewareData$flip2;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement\n      } = middlewareArguments;\n\n      if ((_middlewareData$flip = middlewareData.flip) != null && _middlewareData$flip.skip) {\n        return {};\n      }\n\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const basePlacement = getBasePlacement(placement);\n      const isBasePlacement = basePlacement === initialPlacement;\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[basePlacement]);\n      }\n\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip$, _middlewareData$flip3;\n\n        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip3 = middlewareData.flip) == null ? void 0 : _middlewareData$flip3.index) != null ? _middlewareData$flip$ : 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        let resetPlacement = 'bottom';\n\n        switch (fallbackStrategy) {\n          case 'bestFit':\n            {\n              var _overflowsData$slice$;\n\n              const placement = (_overflowsData$slice$ = overflowsData.slice().sort((a, b) => a.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0) - b.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0))[0]) == null ? void 0 : _overflowsData$slice$.placement;\n\n              if (placement) {\n                resetPlacement = placement;\n              }\n\n              break;\n            }\n\n          case 'initialPlacement':\n            resetPlacement = initialPlacement;\n            break;\n        }\n\n        return {\n          data: {\n            skip: true\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return basePlacements.some(side => overflow[side] >= 0);\n}\n\nconst hide = () => ({\n  name: 'hide',\n\n  async fn(modifierArguments) {\n    const referenceOverflow = await detectOverflow(modifierArguments, {\n      elementContext: 'reference'\n    });\n    const floatingAltOverflow = await detectOverflow(modifierArguments, {\n      altBoundary: true\n    });\n    const referenceHiddenOffsets = getSideOffsets(referenceOverflow, modifierArguments.rects.reference);\n    const escapedOffsets = getSideOffsets(floatingAltOverflow, modifierArguments.rects.floating);\n    const referenceHidden = isAnySideFullyClipped(referenceHiddenOffsets);\n    const escaped = isAnySideFullyClipped(escapedOffsets);\n    return {\n      data: {\n        referenceHidden,\n        referenceHiddenOffsets,\n        escaped,\n        escapedOffsets\n      }\n    };\n  }\n\n});\n\nfunction convertValueToCoords(_ref) {\n  let {\n    placement,\n    rects,\n    value\n  } = _ref;\n  const basePlacement = getBasePlacement(placement);\n  const multiplier = ['left', 'top'].includes(basePlacement) ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value({ ...rects,\n    placement\n  }) : value;\n  const {\n    mainAxis,\n    crossAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    ...rawValue\n  };\n  return getMainAxisFromPlacement(basePlacement) === 'x' ? {\n    x: crossAxis,\n    y: mainAxis * multiplier\n  } : {\n    x: mainAxis * multiplier,\n    y: crossAxis\n  };\n}\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n\n  return {\n    name: 'offset',\n    options: value,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects\n      } = middlewareArguments;\n      const diffCoords = convertValueToCoords({\n        placement,\n        rects,\n        value\n      });\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement\n      } = middlewareArguments;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getBasePlacement(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...middlewareArguments,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(middlewareArguments) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset({ ...rects,\n        placement\n      }) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getBasePlacement(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$size;\n\n      const {\n        placement,\n        rects,\n        middlewareData\n      } = middlewareArguments;\n      const {\n        apply,\n        ...detectOverflowOptions\n      } = options;\n\n      if ((_middlewareData$size = middlewareData.size) != null && _middlewareData$size.skip) {\n        return {};\n      }\n\n      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);\n      const basePlacement = getBasePlacement(placement);\n      const isEnd = getAlignment(placement) === 'end';\n      let heightSide;\n      let widthSide;\n\n      if (basePlacement === 'top' || basePlacement === 'bottom') {\n        heightSide = basePlacement;\n        widthSide = isEnd ? 'left' : 'right';\n      } else {\n        widthSide = basePlacement;\n        heightSide = isEnd ? 'top' : 'bottom';\n      }\n\n      const xMin = max(overflow.left, 0);\n      const xMax = max(overflow.right, 0);\n      const yMin = max(overflow.top, 0);\n      const yMax = max(overflow.bottom, 0);\n      const dimensions = {\n        height: rects.floating.height - (['left', 'right'].includes(placement) ? 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom)) : overflow[heightSide]),\n        width: rects.floating.width - (['top', 'bottom'].includes(placement) ? 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right)) : overflow[widthSide])\n      };\n      apply == null ? void 0 : apply({ ...dimensions,\n        ...rects\n      });\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: true\n        }\n      };\n    }\n\n  };\n};\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(middlewareArguments) {\n      var _middlewareData$inlin, _await$platform$getCl;\n\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy,\n        middlewareData\n      } = middlewareArguments; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n\n      if ((_middlewareData$inlin = middlewareData.inline) != null && _middlewareData$inlin.skip) {\n        return {};\n      }\n\n      const fallback = rectToClientRect(await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await platform.getOffsetParent({\n          element: elements.floating\n        }),\n        strategy\n      }));\n      const clientRects = Array.from((_await$platform$getCl = await (platform.getClientRects == null ? void 0 : platform.getClientRects({\n        element: elements.reference\n      }))) != null ? _await$platform$getCl : []);\n      const paddingObject = getSideObjectFromPadding(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          var _clientRects$find;\n\n          // Find the first rect in which the point is fully inside\n          return (_clientRects$find = clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom)) != null ? _clientRects$find : fallback;\n        } // There are 2 or more connected rects\n\n\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getBasePlacement(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftPlacement = getBasePlacement(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftPlacement ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      return {\n        data: {\n          skip: true\n        },\n        reset: {\n          rects: await platform.getElementRects({\n            reference: {\n              getBoundingClientRect\n            },\n            floating: elements.floating,\n            strategy\n          })\n        }\n      };\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":";;;AAAA,SAASA,gBAAT,CAA0BC,SAA1B,EAAqC;EACnC,OAAOA,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACD;;AAED,SAASC,YAAT,CAAsBF,SAAtB,EAAiC;EAC/B,OAAOA,SAAS,CAACC,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAP;AACD;;AAED,SAASE,wBAAT,CAAkCH,SAAlC,EAA6C;EAC3C,OAAO,CAAC,KAAD,EAAQ,QAAR,EAAkBI,QAAlB,CAA2BL,gBAAgB,CAACC,SAAD,CAA3C,IAA0D,GAA1D,GAAgE,GAAvE;AACD;;AAED,SAASK,iBAAT,CAA2BC,IAA3B,EAAiC;EAC/B,OAAOA,IAAI,KAAK,GAAT,GAAe,QAAf,GAA0B,OAAjC;AACD;;AAED,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;EACxC,IAAI;IACFC,SADE;IAEFC,QAFE;IAGFV;EAHE,IAIAQ,IAJJ;EAKA,MAAMG,OAAO,GAAGF,SAAS,CAACG,CAAV,GAAcH,SAAS,CAACI,KAAV,GAAkB,CAAhC,GAAoCH,QAAQ,CAACG,KAAT,GAAiB,CAArE;EACA,MAAMC,OAAO,GAAGL,SAAS,CAACM,CAAV,GAAcN,SAAS,CAACO,MAAV,GAAmB,CAAjC,GAAqCN,QAAQ,CAACM,MAAT,GAAkB,CAAvE;EACA,IAAIC,MAAJ;;EAEA,QAAQlB,gBAAgB,CAACC,SAAD,CAAxB;IACE,KAAK,KAAL;MACEiB,MAAM,GAAG;QACPL,CAAC,EAAED,OADI;QAEPI,CAAC,EAAEN,SAAS,CAACM,CAAV,GAAcL,QAAQ,CAACM;MAFnB,CAAT;MAIA;;IAEF,KAAK,QAAL;MACEC,MAAM,GAAG;QACPL,CAAC,EAAED,OADI;QAEPI,CAAC,EAAEN,SAAS,CAACM,CAAV,GAAcN,SAAS,CAACO;MAFpB,CAAT;MAIA;;IAEF,KAAK,OAAL;MACEC,MAAM,GAAG;QACPL,CAAC,EAAEH,SAAS,CAACG,CAAV,GAAcH,SAAS,CAACI,KADpB;QAEPE,CAAC,EAAED;MAFI,CAAT;MAIA;;IAEF,KAAK,MAAL;MACEG,MAAM,GAAG;QACPL,CAAC,EAAEH,SAAS,CAACG,CAAV,GAAcF,QAAQ,CAACG,KADnB;QAEPE,CAAC,EAAED;MAFI,CAAT;MAIA;;IAEF;MACEG,MAAM,GAAG;QACPL,CAAC,EAAEH,SAAS,CAACG,CADN;QAEPG,CAAC,EAAEN,SAAS,CAACM;MAFN,CAAT;EA9BJ;;EAoCA,MAAMG,QAAQ,GAAGf,wBAAwB,CAACH,SAAD,CAAzC;EACA,MAAMmB,MAAM,GAAGd,iBAAiB,CAACa,QAAD,CAAhC;;EAEA,QAAQhB,YAAY,CAACF,SAAD,CAApB;IACE,KAAK,OAAL;MACEiB,MAAM,CAACC,QAAD,CAAN,GAAmBD,MAAM,CAACC,QAAD,CAAN,IAAoBT,SAAS,CAACU,MAAD,CAAT,GAAoB,CAApB,GAAwBT,QAAQ,CAACS,MAAD,CAAR,GAAmB,CAA/D,CAAnB;MACA;;IAEF,KAAK,KAAL;MACEF,MAAM,CAACC,QAAD,CAAN,GAAmBD,MAAM,CAACC,QAAD,CAAN,IAAoBT,SAAS,CAACU,MAAD,CAAT,GAAoB,CAApB,GAAwBT,QAAQ,CAACS,MAAD,CAAR,GAAmB,CAA/D,CAAnB;MACA;EAPJ;;EAUA,OAAOF,MAAP;AACD;;AAED,MAAMG,eAAe,GAAG,OAAOX,SAAP,EAAkBC,QAAlB,EAA4BW,MAA5B,KAAuC;EAC7D,MAAM;IACJrB,SAAS,GAAG,QADR;IAEJsB,QAAQ,GAAG,UAFP;IAGJC,UAAU,GAAG,EAHT;IAIJC;EAJI,IAKFH,MALJ;;EAOA,IAAII,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,IAAIH,QAAQ,IAAI,IAAhB,EAAsB;MACpBI,OAAO,CAACC,KAAR,CAAc,CAAC,mEAAD,EAAsE,8DAAtE,EAAsI,kEAAtI,EAA0M,mDAA1M,EAA+PC,IAA/P,CAAoQ,GAApQ,CAAd;IACD;;IAED,IAAIP,UAAU,CAACQ,MAAX,CAAkBvB,IAAI,IAAI;MAC5B,IAAI;QACFwB;MADE,IAEAxB,IAFJ;MAGA,OAAOwB,IAAI,KAAK,eAAT,IAA4BA,IAAI,KAAK,MAA5C;IACD,CALG,EAKDb,MALC,GAKQ,CALZ,EAKe;MACb,MAAM,IAAIc,KAAJ,CAAU,CAAC,sDAAD,EAAyD,sEAAzD,EAAiI,0DAAjI,EAA6LH,IAA7L,CAAkM,GAAlM,CAAV,CAAN;IACD;EACF;;EAED,IAAII,KAAK,GAAG,MAAMV,QAAQ,CAACW,eAAT,CAAyB;IACzC1B,SADyC;IAEzCC,QAFyC;IAGzCY;EAHyC,CAAzB,CAAlB;EAKA,IAAI;IACFV,CADE;IAEFG;EAFE,IAGAR,0BAA0B,CAAC,EAAE,GAAG2B,KAAL;IAC7BlC;EAD6B,CAAD,CAH9B;EAMA,IAAIoC,iBAAiB,GAAGpC,SAAxB;EACA,IAAIqC,cAAc,GAAG,EAArB;EACA,IAAIC,kBAAkB,GAAG,CAAzB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,UAAU,CAACJ,MAA/B,EAAuCoB,CAAC,EAAxC,EAA4C;IAC1C,IAAId,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;MACzCW,kBAAkB;;MAElB,IAAIA,kBAAkB,GAAG,GAAzB,EAA8B;QAC5B,MAAM,IAAIL,KAAJ,CAAU,CAAC,qDAAD,EAAwD,kEAAxD,EAA4H,uDAA5H,EAAqLH,IAArL,CAA0L,GAA1L,CAAV,CAAN;MACD;IACF;;IAED,MAAM;MACJE,IADI;MAEJQ;IAFI,IAGFjB,UAAU,CAACgB,CAAD,CAHd;IAIA,MAAM;MACJ3B,CAAC,EAAE6B,KADC;MAEJ1B,CAAC,EAAE2B,KAFC;MAGJC,IAHI;MAIJC;IAJI,IAKF,MAAMJ,EAAE,CAAC;MACX5B,CADW;MAEXG,CAFW;MAGX8B,gBAAgB,EAAE7C,SAHP;MAIXA,SAAS,EAAEoC,iBAJA;MAKXd,QALW;MAMXe,cANW;MAOXH,KAPW;MAQXV,QARW;MASXsB,QAAQ,EAAE;QACRrC,SADQ;QAERC;MAFQ;IATC,CAAD,CALZ;IAmBAE,CAAC,GAAG6B,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB7B,CAA5B;IACAG,CAAC,GAAG2B,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB3B,CAA5B;IACAsB,cAAc,GAAG,EAAE,GAAGA,cAAL;MACf,CAACL,IAAD,GAAQW,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB;IADf,CAAjB;;IAIA,IAAIC,KAAJ,EAAW;MACT,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;QAC7B,IAAIA,KAAK,CAAC5C,SAAV,EAAqB;UACnBoC,iBAAiB,GAAGQ,KAAK,CAAC5C,SAA1B;QACD;;QAED,IAAI4C,KAAK,CAACV,KAAV,EAAiB;UACfA,KAAK,GAAGU,KAAK,CAACV,KAAN,KAAgB,IAAhB,GAAuB,MAAMV,QAAQ,CAACW,eAAT,CAAyB;YAC5D1B,SAD4D;YAE5DC,QAF4D;YAG5DY;UAH4D,CAAzB,CAA7B,GAIHsB,KAAK,CAACV,KAJX;QAKD;;QAED,CAAC;UACCtB,CADD;UAECG;QAFD,IAGGR,0BAA0B,CAAC,EAAE,GAAG2B,KAAL;UAC7BlC,SAAS,EAAEoC;QADkB,CAAD,CAH9B;MAMD;;MAEDG,CAAC,GAAG,CAAC,CAAL;MACA;IACD;EACF;;EAED,OAAO;IACL3B,CADK;IAELG,CAFK;IAGLf,SAAS,EAAEoC,iBAHN;IAILd,QAJK;IAKLe;EALK,CAAP;AAOD,CA9GD;;AAgHA,SAASU,mBAAT,CAA6BC,OAA7B,EAAsC;EACpC,OAAO;IACLC,GAAG,EAAE,CADA;IAELC,KAAK,EAAE,CAFF;IAGLC,MAAM,EAAE,CAHH;IAILC,IAAI,EAAE,CAJD;IAKL,GAAGJ;EALE,CAAP;AAOD;;AAED,SAASK,wBAAT,CAAkCL,OAAlC,EAA2C;EACzC,OAAO,OAAOA,OAAP,KAAmB,QAAnB,GAA8BD,mBAAmB,CAACC,OAAD,CAAjD,GAA6D;IAClEC,GAAG,EAAED,OAD6D;IAElEE,KAAK,EAAEF,OAF2D;IAGlEG,MAAM,EAAEH,OAH0D;IAIlEI,IAAI,EAAEJ;EAJ4D,CAApE;AAMD;;AAED,SAASM,gBAAT,CAA0BC,IAA1B,EAAgC;EAC9B,OAAO,EAAE,GAAGA,IAAL;IACLN,GAAG,EAAEM,IAAI,CAACxC,CADL;IAELqC,IAAI,EAAEG,IAAI,CAAC3C,CAFN;IAGLsC,KAAK,EAAEK,IAAI,CAAC3C,CAAL,GAAS2C,IAAI,CAAC1C,KAHhB;IAILsC,MAAM,EAAEI,IAAI,CAACxC,CAAL,GAASwC,IAAI,CAACvC;EAJjB,CAAP;AAMD;;AAED,eAAewC,cAAf,CAA8BC,mBAA9B,EAAmDC,OAAnD,EAA4D;EAC1D,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,MAAM;IACJ9C,CADI;IAEJG,CAFI;IAGJS,QAHI;IAIJU,KAJI;IAKJY,QALI;IAMJxB;EANI,IAOFmC,mBAPJ;EAQA,MAAM;IACJE,QAAQ,GAAG,iBADP;IAEJC,YAAY,GAAG,UAFX;IAGJC,cAAc,GAAG,UAHb;IAIJC,WAAW,GAAG,KAJV;IAKJd,OAAO,GAAG;EALN,IAMFU,OANJ;EAOA,MAAMK,aAAa,GAAGV,wBAAwB,CAACL,OAAD,CAA9C;EACA,MAAMgB,UAAU,GAAGH,cAAc,KAAK,UAAnB,GAAgC,WAAhC,GAA8C,UAAjE;EACA,MAAMI,OAAO,GAAGnB,QAAQ,CAACgB,WAAW,GAAGE,UAAH,GAAgBH,cAA5B,CAAxB;EACA,MAAMK,kBAAkB,GAAG,MAAM1C,QAAQ,CAAC2C,qBAAT,CAA+B;IAC9DF,OAAO,EAAE,CAAC,MAAMzC,QAAQ,CAAC4C,SAAT,CAAmBH,OAAnB,CAAP,IAAsCA,OAAtC,GAAgDA,OAAO,CAACI,cAAR,KAA2B,MAAM7C,QAAQ,CAAC8C,kBAAT,CAA4B;MACpHL,OAAO,EAAEnB,QAAQ,CAACpC;IADkG,CAA5B,CAAjC,CADK;IAI9DiD,QAJ8D;IAK9DC;EAL8D,CAA/B,CAAjC;EAOA,MAAMW,iBAAiB,GAAGjB,gBAAgB,CAAC,MAAM9B,QAAQ,CAACgD,qDAAT,CAA+D;IAC9GjB,IAAI,EAAEM,cAAc,KAAK,UAAnB,GAAgC,EAAE,GAAG3B,KAAK,CAACxB,QAAX;MACpCE,CADoC;MAEpCG;IAFoC,CAAhC,GAGFmB,KAAK,CAACzB,SAJoG;IAK9GgE,YAAY,EAAE,MAAMjD,QAAQ,CAACkD,eAAT,CAAyB;MAC3CT,OAAO,EAAEnB,QAAQ,CAACpC;IADyB,CAAzB,CAL0F;IAQ9GY;EAR8G,CAA/D,CAAP,CAA1C,CA9B0D,CAuCrD;EACL;;EAEA,OAAO;IACL2B,GAAG,EAAEiB,kBAAkB,CAACjB,GAAnB,GAAyBsB,iBAAiB,CAACtB,GAA3C,GAAiDc,aAAa,CAACd,GAD/D;IAELE,MAAM,EAAEoB,iBAAiB,CAACpB,MAAlB,GAA2Be,kBAAkB,CAACf,MAA9C,GAAuDY,aAAa,CAACZ,MAFxE;IAGLC,IAAI,EAAEc,kBAAkB,CAACd,IAAnB,GAA0BmB,iBAAiB,CAACnB,IAA5C,GAAmDW,aAAa,CAACX,IAHlE;IAILF,KAAK,EAAEqB,iBAAiB,CAACrB,KAAlB,GAA0BgB,kBAAkB,CAAChB,KAA7C,GAAqDa,aAAa,CAACb;EAJrE,CAAP;AAMD;;AAED,MAAMyB,GAAG,GAAGC,IAAI,CAACD,GAAjB;AACA,MAAME,GAAG,GAAGD,IAAI,CAACC,GAAjB;;AAEA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;EACnC,OAAOJ,GAAG,CAACE,KAAD,EAAQJ,GAAG,CAACK,KAAD,EAAQC,KAAR,CAAX,CAAV;AACD;;AAED,MAAMC,KAAK,GAAGxB,OAAO,KAAK;EACxB1B,IAAI,EAAE,OADkB;EAExB0B,OAFwB;;EAIxB,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;IAC5B;IACA,MAAM;MACJQ,OADI;MAEJjB,OAAO,GAAG;IAFN,IAGFU,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4B,EAHhC;IAIA,MAAM;MACJ9C,CADI;MAEJG,CAFI;MAGJf,SAHI;MAIJkC,KAJI;MAKJV;IALI,IAMFiC,mBANJ;;IAQA,IAAIQ,OAAO,IAAI,IAAf,EAAqB;MACnB,IAAIxC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QACzCC,OAAO,CAACuD,IAAR,CAAa,iEAAb;MACD;;MAED,OAAO,EAAP;IACD;;IAED,MAAMpB,aAAa,GAAGV,wBAAwB,CAACL,OAAD,CAA9C;IACA,MAAM/B,MAAM,GAAG;MACbL,CADa;MAEbG;IAFa,CAAf;IAIA,MAAMqE,aAAa,GAAGrF,gBAAgB,CAACC,SAAD,CAAtC;IACA,MAAMM,IAAI,GAAGH,wBAAwB,CAACiF,aAAD,CAArC;IACA,MAAMjE,MAAM,GAAGd,iBAAiB,CAACC,IAAD,CAAhC;IACA,MAAM+E,eAAe,GAAG,MAAM7D,QAAQ,CAAC8D,aAAT,CAAuB;MACnDrB;IADmD,CAAvB,CAA9B;IAGA,MAAMsB,OAAO,GAAGjF,IAAI,KAAK,GAAT,GAAe,KAAf,GAAuB,MAAvC;IACA,MAAMkF,OAAO,GAAGlF,IAAI,KAAK,GAAT,GAAe,QAAf,GAA0B,OAA1C;IACA,MAAMmF,OAAO,GAAGvD,KAAK,CAACzB,SAAN,CAAgBU,MAAhB,IAA0Be,KAAK,CAACzB,SAAN,CAAgBH,IAAhB,CAA1B,GAAkDW,MAAM,CAACX,IAAD,CAAxD,GAAiE4B,KAAK,CAACxB,QAAN,CAAeS,MAAf,CAAjF;IACA,MAAMuE,SAAS,GAAGzE,MAAM,CAACX,IAAD,CAAN,GAAe4B,KAAK,CAACzB,SAAN,CAAgBH,IAAhB,CAAjC;IACA,MAAMqF,iBAAiB,GAAG,MAAMnE,QAAQ,CAACkD,eAAT,CAAyB;MACvDT;IADuD,CAAzB,CAAhC;IAGA,MAAM2B,UAAU,GAAGD,iBAAiB,GAAGrF,IAAI,KAAK,GAAT,GAAeqF,iBAAiB,CAACE,YAAlB,IAAkC,CAAjD,GAAqDF,iBAAiB,CAACG,WAAlB,IAAiC,CAAzF,GAA6F,CAAjI;IACA,MAAMC,iBAAiB,GAAGN,OAAO,GAAG,CAAV,GAAcC,SAAS,GAAG,CAApD,CAzC4B,CAyC2B;IACvD;;IAEA,MAAMf,GAAG,GAAGZ,aAAa,CAACwB,OAAD,CAAzB;IACA,MAAMV,GAAG,GAAGe,UAAU,GAAGP,eAAe,CAAClE,MAAD,CAA5B,GAAuC4C,aAAa,CAACyB,OAAD,CAAhE;IACA,MAAMQ,MAAM,GAAGJ,UAAU,GAAG,CAAb,GAAiBP,eAAe,CAAClE,MAAD,CAAf,GAA0B,CAA3C,GAA+C4E,iBAA9D;IACA,MAAME,MAAM,GAAGnB,MAAM,CAACH,GAAD,EAAMqB,MAAN,EAAcnB,GAAd,CAArB;IACA,OAAO;MACLlC,IAAI,EAAE;QACJ,CAACrC,IAAD,GAAQ2F,MADJ;QAEJC,YAAY,EAAEF,MAAM,GAAGC;MAFnB;IADD,CAAP;EAMD;;AA1DuB,CAAL,CAArB;;AA8DA,MAAME,MAAM,GAAG;EACb/C,IAAI,EAAE,OADO;EAEbF,KAAK,EAAE,MAFM;EAGbC,MAAM,EAAE,KAHK;EAIbF,GAAG,EAAE;AAJQ,CAAf;;AAMA,SAASmD,oBAAT,CAA8BpG,SAA9B,EAAyC;EACvC,OAAOA,SAAS,CAACqG,OAAV,CAAkB,wBAAlB,EAA4CC,OAAO,IAAIH,MAAM,CAACG,OAAD,CAA7D,CAAP;AACD;;AAED,SAASC,iBAAT,CAA2BvG,SAA3B,EAAsCkC,KAAtC,EAA6C;EAC3C,MAAMsE,OAAO,GAAGtG,YAAY,CAACF,SAAD,CAAZ,KAA4B,OAA5C;EACA,MAAMkB,QAAQ,GAAGf,wBAAwB,CAACH,SAAD,CAAzC;EACA,MAAMmB,MAAM,GAAGd,iBAAiB,CAACa,QAAD,CAAhC;EACA,IAAIuF,iBAAiB,GAAGvF,QAAQ,KAAK,GAAb,GAAmBsF,OAAO,GAAG,OAAH,GAAa,MAAvC,GAAgDA,OAAO,GAAG,QAAH,GAAc,KAA7F;;EAEA,IAAItE,KAAK,CAACzB,SAAN,CAAgBU,MAAhB,IAA0Be,KAAK,CAACxB,QAAN,CAAeS,MAAf,CAA9B,EAAsD;IACpDsF,iBAAiB,GAAGL,oBAAoB,CAACK,iBAAD,CAAxC;EACD;;EAED,OAAO;IACLC,IAAI,EAAED,iBADD;IAELE,KAAK,EAAEP,oBAAoB,CAACK,iBAAD;EAFtB,CAAP;AAID;;AAED,MAAMG,IAAI,GAAG;EACXC,KAAK,EAAE,KADI;EAEXC,GAAG,EAAE;AAFM,CAAb;;AAIA,SAASC,6BAAT,CAAuC/G,SAAvC,EAAkD;EAChD,OAAOA,SAAS,CAACqG,OAAV,CAAkB,YAAlB,EAAgCC,OAAO,IAAIM,IAAI,CAACN,OAAD,CAA/C,CAAP;AACD;;AAED,MAAMU,cAAc,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,QAAjB,EAA2B,MAA3B,CAAvB;AACA,MAAMC,aAAa,GAAG,aAAaD,cAAc,CAACE,MAAf,CAAsB,CAACC,GAAD,EAAM/B,aAAN,KAAwB+B,GAAG,CAACC,MAAJ,CAAWhC,aAAX,EAA0BA,aAAa,GAAG,QAA1C,EAAoDA,aAAa,GAAG,MAApE,CAA9C,EAA2H,EAA3H,CAAnC;;AAEA,SAASiC,gBAAT,CAA0BC,SAA1B,EAAqCC,aAArC,EAAoDC,iBAApD,EAAuE;EACrE,MAAMC,kCAAkC,GAAGH,SAAS,GAAG,CAAC,GAAGE,iBAAiB,CAACzF,MAAlB,CAAyB/B,SAAS,IAAIE,YAAY,CAACF,SAAD,CAAZ,KAA4BsH,SAAlE,CAAJ,EAAkF,GAAGE,iBAAiB,CAACzF,MAAlB,CAAyB/B,SAAS,IAAIE,YAAY,CAACF,SAAD,CAAZ,KAA4BsH,SAAlE,CAArF,CAAH,GAAwKE,iBAAiB,CAACzF,MAAlB,CAAyB/B,SAAS,IAAID,gBAAgB,CAACC,SAAD,CAAhB,KAAgCA,SAAtE,CAA5N;EACA,OAAOyH,kCAAkC,CAAC1F,MAAnC,CAA0C/B,SAAS,IAAI;IAC5D,IAAIsH,SAAJ,EAAe;MACb,OAAOpH,YAAY,CAACF,SAAD,CAAZ,KAA4BsH,SAA5B,KAA0CC,aAAa,GAAGR,6BAA6B,CAAC/G,SAAD,CAA7B,KAA6CA,SAAhD,GAA4D,KAAnH,CAAP;IACD;;IAED,OAAO,IAAP;EACD,CANM,CAAP;AAOD;;AACD,MAAM0H,aAAa,GAAG,UAAUhE,OAAV,EAAmB;EACvC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACL1B,IAAI,EAAE,eADD;IAEL0B,OAFK;;IAIL,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;MAC5B,IAAIkE,qBAAJ,EAA2BC,sBAA3B,EAAmDC,sBAAnD,EAA2EC,sBAA3E,EAAmGC,sBAAnG,EAA2HC,qBAA3H;;MAEA,MAAM;QACJpH,CADI;QAEJG,CAFI;QAGJmB,KAHI;QAIJG,cAJI;QAKJrC;MALI,IAMFyD,mBANJ;MAOA,MAAM;QACJ6D,SAAS,GAAG,IADR;QAEJE,iBAAiB,GAAGP,aAFhB;QAGJM,aAAa,GAAG,IAHZ;QAIJ,GAAGU;MAJC,IAKFvE,OALJ;;MAOA,IAAI,CAACiE,qBAAqB,GAAGtF,cAAc,CAACqF,aAAxC,KAA0D,IAA1D,IAAkEC,qBAAqB,CAACO,IAA5F,EAAkG;QAChG,OAAO,EAAP;MACD;;MAED,MAAMC,UAAU,GAAGd,gBAAgB,CAACC,SAAD,EAAYC,aAAZ,EAA2BC,iBAA3B,CAAnC;MACA,MAAMY,QAAQ,GAAG,MAAM5E,cAAc,CAACC,mBAAD,EAAsBwE,qBAAtB,CAArC;MACA,MAAMI,YAAY,GAAG,CAACT,sBAAsB,GAAG,CAACC,sBAAsB,GAAGxF,cAAc,CAACqF,aAAzC,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2EG,sBAAsB,CAACS,KAA5H,KAAsI,IAAtI,GAA6IV,sBAA7I,GAAsK,CAA3L;MACA,MAAMW,gBAAgB,GAAGJ,UAAU,CAACE,YAAD,CAAnC;MACA,MAAM;QACJ3B,IADI;QAEJC;MAFI,IAGFJ,iBAAiB,CAACgC,gBAAD,EAAmBrG,KAAnB,CAHrB,CAzB4B,CA4BoB;;MAEhD,IAAIlC,SAAS,KAAKuI,gBAAlB,EAAoC;QAClC,OAAO;UACL3H,CADK;UAELG,CAFK;UAGL6B,KAAK,EAAE;YACL5C,SAAS,EAAEmI,UAAU,CAAC,CAAD;UADhB;QAHF,CAAP;MAOD;;MAED,MAAMK,gBAAgB,GAAG,CAACJ,QAAQ,CAACrI,gBAAgB,CAACwI,gBAAD,CAAjB,CAAT,EAA+CH,QAAQ,CAAC1B,IAAD,CAAvD,EAA+D0B,QAAQ,CAACzB,KAAD,CAAvE,CAAzB;MACA,MAAM8B,YAAY,GAAG,CAAC,IAAI,CAACX,sBAAsB,GAAG,CAACC,sBAAsB,GAAG1F,cAAc,CAACqF,aAAzC,KAA2D,IAA3D,GAAkE,KAAK,CAAvE,GAA2EK,sBAAsB,CAACW,SAA5H,KAA0I,IAA1I,GAAiJZ,sBAAjJ,GAA0K,EAA9K,CAAD,EAAoL;QACvM9H,SAAS,EAAEuI,gBAD4L;QAEvMG,SAAS,EAAEF;MAF4L,CAApL,CAArB;MAIA,MAAMG,aAAa,GAAGR,UAAU,CAACE,YAAY,GAAG,CAAhB,CAAhC,CA7C4B,CA6CwB;;MAEpD,IAAIM,aAAJ,EAAmB;QACjB,OAAO;UACLhG,IAAI,EAAE;YACJ2F,KAAK,EAAED,YAAY,GAAG,CADlB;YAEJK,SAAS,EAAED;UAFP,CADD;UAKL7F,KAAK,EAAE;YACL5C,SAAS,EAAE2I;UADN;QALF,CAAP;MASD;;MAED,MAAMC,+BAA+B,GAAGH,YAAY,CAACI,KAAb,GAAqBC,IAArB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACL,SAAF,CAAY,CAAZ,IAAiBM,CAAC,CAACN,SAAF,CAAY,CAAZ,CAArD,CAAxC;MACA,MAAMO,2BAA2B,GAAG,CAACjB,qBAAqB,GAAGY,+BAA+B,CAACM,IAAhC,CAAqC1I,IAAI,IAAI;QACxG,IAAI;UACFkI;QADE,IAEAlI,IAFJ;QAGA,OAAOkI,SAAS,CAACS,KAAV,CAAgBf,QAAQ,IAAIA,QAAQ,IAAI,CAAxC,CAAP;MACD,CAL4D,CAAzB,KAK7B,IAL6B,GAKtB,KAAK,CALiB,GAKbJ,qBAAqB,CAAChI,SAL7C;MAMA,OAAO;QACL2C,IAAI,EAAE;UACJuF,IAAI,EAAE;QADF,CADD;QAILtF,KAAK,EAAE;UACL5C,SAAS,EAAEiJ,2BAA2B,IAAI,IAA/B,GAAsCA,2BAAtC,GAAoEL,+BAA+B,CAAC,CAAD,CAA/B,CAAmC5I;QAD7G;MAJF,CAAP;IAQD;;EA9EI,CAAP;AAiFD,CAtFD;;AAwFA,SAASoJ,qBAAT,CAA+BpJ,SAA/B,EAA0C;EACxC,MAAMqJ,iBAAiB,GAAGjD,oBAAoB,CAACpG,SAAD,CAA9C;EACA,OAAO,CAAC+G,6BAA6B,CAAC/G,SAAD,CAA9B,EAA2CqJ,iBAA3C,EAA8DtC,6BAA6B,CAACsC,iBAAD,CAA3F,CAAP;AACD;;AAED,MAAMC,IAAI,GAAG,UAAU5F,OAAV,EAAmB;EAC9B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACL1B,IAAI,EAAE,MADD;IAEL0B,OAFK;;IAIL,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;MAC5B,IAAI8F,oBAAJ,EAA0BC,qBAA1B;;MAEA,MAAM;QACJxJ,SADI;QAEJqC,cAFI;QAGJH,KAHI;QAIJW;MAJI,IAKFY,mBALJ;;MAOA,IAAI,CAAC8F,oBAAoB,GAAGlH,cAAc,CAACiH,IAAvC,KAAgD,IAAhD,IAAwDC,oBAAoB,CAACrB,IAAjF,EAAuF;QACrF,OAAO,EAAP;MACD;;MAED,MAAM;QACJhH,QAAQ,EAAEuI,aAAa,GAAG,IADtB;QAEJC,SAAS,EAAEC,cAAc,GAAG,IAFxB;QAGJC,kBAAkB,EAAEC,2BAHhB;QAIJC,gBAAgB,GAAG,SAJf;QAKJC,aAAa,GAAG,IALZ;QAMJ,GAAG9B;MANC,IAOFvE,OAPJ;MAQA,MAAM0B,aAAa,GAAGrF,gBAAgB,CAACC,SAAD,CAAtC;MACA,MAAMgK,eAAe,GAAG5E,aAAa,KAAKvC,gBAA1C;MACA,MAAM+G,kBAAkB,GAAGC,2BAA2B,KAAKG,eAAe,IAAI,CAACD,aAApB,GAAoC,CAAC3D,oBAAoB,CAACvD,gBAAD,CAArB,CAApC,GAA+EuG,qBAAqB,CAACvG,gBAAD,CAAzG,CAAtD;MACA,MAAMsF,UAAU,GAAG,CAACtF,gBAAD,EAAmB,GAAG+G,kBAAtB,CAAnB;MACA,MAAMxB,QAAQ,GAAG,MAAM5E,cAAc,CAACC,mBAAD,EAAsBwE,qBAAtB,CAArC;MACA,MAAMS,SAAS,GAAG,EAAlB;MACA,IAAIuB,aAAa,GAAG,CAAC,CAACT,qBAAqB,GAAGnH,cAAc,CAACiH,IAAxC,KAAiD,IAAjD,GAAwD,KAAK,CAA7D,GAAiEE,qBAAqB,CAACd,SAAxF,KAAsG,EAA1H;;MAEA,IAAIe,aAAJ,EAAmB;QACjBf,SAAS,CAACwB,IAAV,CAAe9B,QAAQ,CAAChD,aAAD,CAAvB;MACD;;MAED,IAAIuE,cAAJ,EAAoB;QAClB,MAAM;UACJjD,IADI;UAEJC;QAFI,IAGFJ,iBAAiB,CAACvG,SAAD,EAAYkC,KAAZ,CAHrB;QAIAwG,SAAS,CAACwB,IAAV,CAAe9B,QAAQ,CAAC1B,IAAD,CAAvB,EAA+B0B,QAAQ,CAACzB,KAAD,CAAvC;MACD;;MAEDsD,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB;QACjCjK,SADiC;QAEjC0I;MAFiC,CAAnB,CAAhB,CA1C4B,CA6CxB;;MAEJ,IAAI,CAACA,SAAS,CAACS,KAAV,CAAgBgB,IAAI,IAAIA,IAAI,IAAI,CAAhC,CAAL,EAAyC;QACvC,IAAIC,qBAAJ,EAA2BC,qBAA3B;;QAEA,MAAMC,SAAS,GAAG,CAAC,CAACF,qBAAqB,GAAG,CAACC,qBAAqB,GAAGhI,cAAc,CAACiH,IAAxC,KAAiD,IAAjD,GAAwD,KAAK,CAA7D,GAAiEe,qBAAqB,CAAC/B,KAAhH,KAA0H,IAA1H,GAAiI8B,qBAAjI,GAAyJ,CAA1J,IAA+J,CAAjL;QACA,MAAMzB,aAAa,GAAGR,UAAU,CAACmC,SAAD,CAAhC;;QAEA,IAAI3B,aAAJ,EAAmB;UACjB;UACA,OAAO;YACLhG,IAAI,EAAE;cACJ2F,KAAK,EAAEgC,SADH;cAEJ5B,SAAS,EAAEuB;YAFP,CADD;YAKLrH,KAAK,EAAE;cACL5C,SAAS,EAAE2I;YADN;UALF,CAAP;QASD;;QAED,IAAI4B,cAAc,GAAG,QAArB;;QAEA,QAAQT,gBAAR;UACE,KAAK,SAAL;YACE;cACE,IAAIU,qBAAJ;;cAEA,MAAMxK,SAAS,GAAG,CAACwK,qBAAqB,GAAGP,aAAa,CAACpB,KAAd,GAAsBC,IAAtB,CAA2B,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACL,SAAF,CAAY3G,MAAZ,CAAmBqG,QAAQ,IAAIA,QAAQ,GAAG,CAA1C,EAA6ClB,MAA7C,CAAoD,CAACC,GAAD,EAAMiB,QAAN,KAAmBjB,GAAG,GAAGiB,QAA7E,EAAuF,CAAvF,IAA4FY,CAAC,CAACN,SAAF,CAAY3G,MAAZ,CAAmBqG,QAAQ,IAAIA,QAAQ,GAAG,CAA1C,EAA6ClB,MAA7C,CAAoD,CAACC,GAAD,EAAMiB,QAAN,KAAmBjB,GAAG,GAAGiB,QAA7E,EAAuF,CAAvF,CAAjI,EAA4N,CAA5N,CAAzB,KAA4P,IAA5P,GAAmQ,KAAK,CAAxQ,GAA4QoC,qBAAqB,CAACxK,SAApT;;cAEA,IAAIA,SAAJ,EAAe;gBACbuK,cAAc,GAAGvK,SAAjB;cACD;;cAED;YACD;;UAEH,KAAK,kBAAL;YACEuK,cAAc,GAAG1H,gBAAjB;YACA;QAhBJ;;QAmBA,OAAO;UACLF,IAAI,EAAE;YACJuF,IAAI,EAAE;UADF,CADD;UAILtF,KAAK,EAAE;YACL5C,SAAS,EAAEuK;UADN;QAJF,CAAP;MAQD;;MAED,OAAO,EAAP;IACD;;EAtGI,CAAP;AAyGD,CA9GD;;AAgHA,SAASE,cAAT,CAAwBrC,QAAxB,EAAkC7E,IAAlC,EAAwC;EACtC,OAAO;IACLN,GAAG,EAAEmF,QAAQ,CAACnF,GAAT,GAAeM,IAAI,CAACvC,MADpB;IAELkC,KAAK,EAAEkF,QAAQ,CAAClF,KAAT,GAAiBK,IAAI,CAAC1C,KAFxB;IAGLsC,MAAM,EAAEiF,QAAQ,CAACjF,MAAT,GAAkBI,IAAI,CAACvC,MAH1B;IAILoC,IAAI,EAAEgF,QAAQ,CAAChF,IAAT,GAAgBG,IAAI,CAAC1C;EAJtB,CAAP;AAMD;;AAED,SAAS6J,qBAAT,CAA+BtC,QAA/B,EAAyC;EACvC,OAAOpB,cAAc,CAAC2D,IAAf,CAAoBR,IAAI,IAAI/B,QAAQ,CAAC+B,IAAD,CAAR,IAAkB,CAA9C,CAAP;AACD;;AAED,MAAMS,IAAI,GAAG,OAAO;EAClB5I,IAAI,EAAE,MADY;;EAGlB,MAAMQ,EAAN,CAASqI,iBAAT,EAA4B;IAC1B,MAAMC,iBAAiB,GAAG,MAAMtH,cAAc,CAACqH,iBAAD,EAAoB;MAChEhH,cAAc,EAAE;IADgD,CAApB,CAA9C;IAGA,MAAMkH,mBAAmB,GAAG,MAAMvH,cAAc,CAACqH,iBAAD,EAAoB;MAClE/G,WAAW,EAAE;IADqD,CAApB,CAAhD;IAGA,MAAMkH,sBAAsB,GAAGP,cAAc,CAACK,iBAAD,EAAoBD,iBAAiB,CAAC3I,KAAlB,CAAwBzB,SAA5C,CAA7C;IACA,MAAMwK,cAAc,GAAGR,cAAc,CAACM,mBAAD,EAAsBF,iBAAiB,CAAC3I,KAAlB,CAAwBxB,QAA9C,CAArC;IACA,MAAMwK,eAAe,GAAGR,qBAAqB,CAACM,sBAAD,CAA7C;IACA,MAAMG,OAAO,GAAGT,qBAAqB,CAACO,cAAD,CAArC;IACA,OAAO;MACLtI,IAAI,EAAE;QACJuI,eADI;QAEJF,sBAFI;QAGJG,OAHI;QAIJF;MAJI;IADD,CAAP;EAQD;;AAtBiB,CAAP,CAAb;;AA0BA,SAASG,oBAAT,CAA8B5K,IAA9B,EAAoC;EAClC,IAAI;IACFR,SADE;IAEFkC,KAFE;IAGF8C;EAHE,IAIAxE,IAJJ;EAKA,MAAM4E,aAAa,GAAGrF,gBAAgB,CAACC,SAAD,CAAtC;EACA,MAAMqL,UAAU,GAAG,CAAC,MAAD,EAAS,KAAT,EAAgBjL,QAAhB,CAAyBgF,aAAzB,IAA0C,CAAC,CAA3C,GAA+C,CAAlE;EACA,MAAMkG,QAAQ,GAAG,OAAOtG,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAAC,EAAE,GAAG9C,KAAL;IACnDlC;EADmD,CAAD,CAAnC,GAEZgF,KAFL;EAGA,MAAM;IACJ9D,QADI;IAEJwI;EAFI,IAGF,OAAO4B,QAAP,KAAoB,QAApB,GAA+B;IACjCpK,QAAQ,EAAEoK,QADuB;IAEjC5B,SAAS,EAAE;EAFsB,CAA/B,GAGA;IACFxI,QAAQ,EAAE,CADR;IAEFwI,SAAS,EAAE,CAFT;IAGF,GAAG4B;EAHD,CANJ;EAWA,OAAOnL,wBAAwB,CAACiF,aAAD,CAAxB,KAA4C,GAA5C,GAAkD;IACvDxE,CAAC,EAAE8I,SADoD;IAEvD3I,CAAC,EAAEG,QAAQ,GAAGmK;EAFyC,CAAlD,GAGH;IACFzK,CAAC,EAAEM,QAAQ,GAAGmK,UADZ;IAEFtK,CAAC,EAAE2I;EAFD,CAHJ;AAOD;;AACD,MAAMzD,MAAM,GAAG,UAAUjB,KAAV,EAAiB;EAC9B,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;IACpBA,KAAK,GAAG,CAAR;EACD;;EAED,OAAO;IACLhD,IAAI,EAAE,QADD;IAEL0B,OAAO,EAAEsB,KAFJ;;IAILxC,EAAE,CAACiB,mBAAD,EAAsB;MACtB,MAAM;QACJ7C,CADI;QAEJG,CAFI;QAGJf,SAHI;QAIJkC;MAJI,IAKFuB,mBALJ;MAMA,MAAM8H,UAAU,GAAGH,oBAAoB,CAAC;QACtCpL,SADsC;QAEtCkC,KAFsC;QAGtC8C;MAHsC,CAAD,CAAvC;MAKA,OAAO;QACLpE,CAAC,EAAEA,CAAC,GAAG2K,UAAU,CAAC3K,CADb;QAELG,CAAC,EAAEA,CAAC,GAAGwK,UAAU,CAACxK,CAFb;QAGL4B,IAAI,EAAE4I;MAHD,CAAP;IAKD;;EArBI,CAAP;AAwBD,CA7BD;;AA+BA,SAASC,YAAT,CAAsBlL,IAAtB,EAA4B;EAC1B,OAAOA,IAAI,KAAK,GAAT,GAAe,GAAf,GAAqB,GAA5B;AACD;;AAED,MAAMmL,KAAK,GAAG,UAAU/H,OAAV,EAAmB;EAC/B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACL1B,IAAI,EAAE,OADD;IAEL0B,OAFK;;IAIL,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;MAC5B,MAAM;QACJ7C,CADI;QAEJG,CAFI;QAGJf;MAHI,IAIFyD,mBAJJ;MAKA,MAAM;QACJvC,QAAQ,EAAEuI,aAAa,GAAG,IADtB;QAEJC,SAAS,EAAEC,cAAc,GAAG,KAFxB;QAGJ+B,OAAO,GAAG;UACRlJ,EAAE,EAAEhC,IAAI,IAAI;YACV,IAAI;cACFI,CADE;cAEFG;YAFE,IAGAP,IAHJ;YAIA,OAAO;cACLI,CADK;cAELG;YAFK,CAAP;UAID;QAVO,CAHN;QAeJ,GAAGkH;MAfC,IAgBFvE,OAhBJ;MAiBA,MAAMzC,MAAM,GAAG;QACbL,CADa;QAEbG;MAFa,CAAf;MAIA,MAAMqH,QAAQ,GAAG,MAAM5E,cAAc,CAACC,mBAAD,EAAsBwE,qBAAtB,CAArC;MACA,MAAM/G,QAAQ,GAAGf,wBAAwB,CAACJ,gBAAgB,CAACC,SAAD,CAAjB,CAAzC;MACA,MAAM0J,SAAS,GAAG8B,YAAY,CAACtK,QAAD,CAA9B;MACA,IAAIyK,aAAa,GAAG1K,MAAM,CAACC,QAAD,CAA1B;MACA,IAAI0K,cAAc,GAAG3K,MAAM,CAACyI,SAAD,CAA3B;;MAEA,IAAID,aAAJ,EAAmB;QACjB,MAAMoC,OAAO,GAAG3K,QAAQ,KAAK,GAAb,GAAmB,KAAnB,GAA2B,MAA3C;QACA,MAAM4K,OAAO,GAAG5K,QAAQ,KAAK,GAAb,GAAmB,QAAnB,GAA8B,OAA9C;QACA,MAAMyD,GAAG,GAAGgH,aAAa,GAAGvD,QAAQ,CAACyD,OAAD,CAApC;QACA,MAAMhH,GAAG,GAAG8G,aAAa,GAAGvD,QAAQ,CAAC0D,OAAD,CAApC;QACAH,aAAa,GAAG7G,MAAM,CAACH,GAAD,EAAMgH,aAAN,EAAqB9G,GAArB,CAAtB;MACD;;MAED,IAAI8E,cAAJ,EAAoB;QAClB,MAAMkC,OAAO,GAAGnC,SAAS,KAAK,GAAd,GAAoB,KAApB,GAA4B,MAA5C;QACA,MAAMoC,OAAO,GAAGpC,SAAS,KAAK,GAAd,GAAoB,QAApB,GAA+B,OAA/C;QACA,MAAM/E,GAAG,GAAGiH,cAAc,GAAGxD,QAAQ,CAACyD,OAAD,CAArC;QACA,MAAMhH,GAAG,GAAG+G,cAAc,GAAGxD,QAAQ,CAAC0D,OAAD,CAArC;QACAF,cAAc,GAAG9G,MAAM,CAACH,GAAD,EAAMiH,cAAN,EAAsB/G,GAAtB,CAAvB;MACD;;MAED,MAAMkH,aAAa,GAAGL,OAAO,CAAClJ,EAAR,CAAW,EAAE,GAAGiB,mBAAL;QAC/B,CAACvC,QAAD,GAAYyK,aADmB;QAE/B,CAACjC,SAAD,GAAakC;MAFkB,CAAX,CAAtB;MAIA,OAAO,EAAE,GAAGG,aAAL;QACLpJ,IAAI,EAAE;UACJ/B,CAAC,EAAEmL,aAAa,CAACnL,CAAd,GAAkBA,CADjB;UAEJG,CAAC,EAAEgL,aAAa,CAAChL,CAAd,GAAkBA;QAFjB;MADD,CAAP;IAMD;;EA/DI,CAAP;AAkED,CAvED;;AAwEA,MAAMiL,UAAU,GAAG,UAAUtI,OAAV,EAAmB;EACpC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACLA,OADK;;IAGLlB,EAAE,CAACiB,mBAAD,EAAsB;MACtB,MAAM;QACJ7C,CADI;QAEJG,CAFI;QAGJf,SAHI;QAIJkC,KAJI;QAKJG;MALI,IAMFoB,mBANJ;MAOA,MAAM;QACJwC,MAAM,GAAG,CADL;QAEJ/E,QAAQ,EAAEuI,aAAa,GAAG,IAFtB;QAGJC,SAAS,EAAEC,cAAc,GAAG;MAHxB,IAIFjG,OAJJ;MAKA,MAAMzC,MAAM,GAAG;QACbL,CADa;QAEbG;MAFa,CAAf;MAIA,MAAMG,QAAQ,GAAGf,wBAAwB,CAACH,SAAD,CAAzC;MACA,MAAM0J,SAAS,GAAG8B,YAAY,CAACtK,QAAD,CAA9B;MACA,IAAIyK,aAAa,GAAG1K,MAAM,CAACC,QAAD,CAA1B;MACA,IAAI0K,cAAc,GAAG3K,MAAM,CAACyI,SAAD,CAA3B;MACA,MAAMuC,SAAS,GAAG,OAAOhG,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAAC,EAAE,GAAG/D,KAAL;QACtDlC;MADsD,CAAD,CAArC,GAEbiG,MAFL;MAGA,MAAMiG,cAAc,GAAG,OAAOD,SAAP,KAAqB,QAArB,GAAgC;QACrD/K,QAAQ,EAAE+K,SAD2C;QAErDvC,SAAS,EAAE;MAF0C,CAAhC,GAGnB;QACFxI,QAAQ,EAAE,CADR;QAEFwI,SAAS,EAAE,CAFT;QAGF,GAAGuC;MAHD,CAHJ;;MASA,IAAIxC,aAAJ,EAAmB;QACjB,MAAM0C,GAAG,GAAGjL,QAAQ,KAAK,GAAb,GAAmB,QAAnB,GAA8B,OAA1C;QACA,MAAMkL,QAAQ,GAAGlK,KAAK,CAACzB,SAAN,CAAgBS,QAAhB,IAA4BgB,KAAK,CAACxB,QAAN,CAAeyL,GAAf,CAA5B,GAAkDD,cAAc,CAAChL,QAAlF;QACA,MAAMmL,QAAQ,GAAGnK,KAAK,CAACzB,SAAN,CAAgBS,QAAhB,IAA4BgB,KAAK,CAACzB,SAAN,CAAgB0L,GAAhB,CAA5B,GAAmDD,cAAc,CAAChL,QAAnF;;QAEA,IAAIyK,aAAa,GAAGS,QAApB,EAA8B;UAC5BT,aAAa,GAAGS,QAAhB;QACD,CAFD,MAEO,IAAIT,aAAa,GAAGU,QAApB,EAA8B;UACnCV,aAAa,GAAGU,QAAhB;QACD;MACF;;MAED,IAAI1C,cAAJ,EAAoB;QAClB,IAAI2C,qBAAJ,EAA2BC,sBAA3B,EAAmDC,sBAAnD,EAA2EC,sBAA3E;;QAEA,MAAMN,GAAG,GAAGjL,QAAQ,KAAK,GAAb,GAAmB,OAAnB,GAA6B,QAAzC;QACA,MAAMwL,YAAY,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgBtM,QAAhB,CAAyBL,gBAAgB,CAACC,SAAD,CAAzC,CAArB;QACA,MAAMoM,QAAQ,GAAGlK,KAAK,CAACzB,SAAN,CAAgBiJ,SAAhB,IAA6BxH,KAAK,CAACxB,QAAN,CAAeyL,GAAf,CAA7B,IAAoDO,YAAY,GAAG,CAACJ,qBAAqB,GAAG,CAACC,sBAAsB,GAAGlK,cAAc,CAAC4D,MAAzC,KAAoD,IAApD,GAA2D,KAAK,CAAhE,GAAoEsG,sBAAsB,CAAC7C,SAAD,CAAnH,KAAmI,IAAnI,GAA0I4C,qBAA1I,GAAkK,CAArK,GAAyK,CAAzO,KAA+OI,YAAY,GAAG,CAAH,GAAOR,cAAc,CAACxC,SAAjR,CAAjB;QACA,MAAM2C,QAAQ,GAAGnK,KAAK,CAACzB,SAAN,CAAgBiJ,SAAhB,IAA6BxH,KAAK,CAACzB,SAAN,CAAgB0L,GAAhB,CAA7B,IAAqDO,YAAY,GAAG,CAAH,GAAO,CAACF,sBAAsB,GAAG,CAACC,sBAAsB,GAAGpK,cAAc,CAAC4D,MAAzC,KAAoD,IAApD,GAA2D,KAAK,CAAhE,GAAoEwG,sBAAsB,CAAC/C,SAAD,CAApH,KAAoI,IAApI,GAA2I8C,sBAA3I,GAAoK,CAA5O,KAAkPE,YAAY,GAAGR,cAAc,CAACxC,SAAlB,GAA8B,CAA5R,CAAjB;;QAEA,IAAIkC,cAAc,GAAGQ,QAArB,EAA+B;UAC7BR,cAAc,GAAGQ,QAAjB;QACD,CAFD,MAEO,IAAIR,cAAc,GAAGS,QAArB,EAA+B;UACpCT,cAAc,GAAGS,QAAjB;QACD;MACF;;MAED,OAAO;QACL,CAACnL,QAAD,GAAYyK,aADP;QAEL,CAACjC,SAAD,GAAakC;MAFR,CAAP;IAID;;EAnEI,CAAP;AAsED,CA3ED;;AA6EA,MAAMe,IAAI,GAAG,UAAUjJ,OAAV,EAAmB;EAC9B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACL1B,IAAI,EAAE,MADD;IAEL0B,OAFK;;IAIL,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;MAC5B,IAAImJ,oBAAJ;;MAEA,MAAM;QACJ5M,SADI;QAEJkC,KAFI;QAGJG;MAHI,IAIFoB,mBAJJ;MAKA,MAAM;QACJoJ,KADI;QAEJ,GAAG5E;MAFC,IAGFvE,OAHJ;;MAKA,IAAI,CAACkJ,oBAAoB,GAAGvK,cAAc,CAACsK,IAAvC,KAAgD,IAAhD,IAAwDC,oBAAoB,CAAC1E,IAAjF,EAAuF;QACrF,OAAO,EAAP;MACD;;MAED,MAAME,QAAQ,GAAG,MAAM5E,cAAc,CAACC,mBAAD,EAAsBwE,qBAAtB,CAArC;MACA,MAAM7C,aAAa,GAAGrF,gBAAgB,CAACC,SAAD,CAAtC;MACA,MAAM8M,KAAK,GAAG5M,YAAY,CAACF,SAAD,CAAZ,KAA4B,KAA1C;MACA,IAAI+M,UAAJ;MACA,IAAIC,SAAJ;;MAEA,IAAI5H,aAAa,KAAK,KAAlB,IAA2BA,aAAa,KAAK,QAAjD,EAA2D;QACzD2H,UAAU,GAAG3H,aAAb;QACA4H,SAAS,GAAGF,KAAK,GAAG,MAAH,GAAY,OAA7B;MACD,CAHD,MAGO;QACLE,SAAS,GAAG5H,aAAZ;QACA2H,UAAU,GAAGD,KAAK,GAAG,KAAH,GAAW,QAA7B;MACD;;MAED,MAAMG,IAAI,GAAGpI,GAAG,CAACuD,QAAQ,CAAChF,IAAV,EAAgB,CAAhB,CAAhB;MACA,MAAM8J,IAAI,GAAGrI,GAAG,CAACuD,QAAQ,CAAClF,KAAV,EAAiB,CAAjB,CAAhB;MACA,MAAMiK,IAAI,GAAGtI,GAAG,CAACuD,QAAQ,CAACnF,GAAV,EAAe,CAAf,CAAhB;MACA,MAAMmK,IAAI,GAAGvI,GAAG,CAACuD,QAAQ,CAACjF,MAAV,EAAkB,CAAlB,CAAhB;MACA,MAAMkK,UAAU,GAAG;QACjBrM,MAAM,EAAEkB,KAAK,CAACxB,QAAN,CAAeM,MAAf,IAAyB,CAAC,MAAD,EAAS,OAAT,EAAkBZ,QAAlB,CAA2BJ,SAA3B,IAAwC,KAAKmN,IAAI,KAAK,CAAT,IAAcC,IAAI,KAAK,CAAvB,GAA2BD,IAAI,GAAGC,IAAlC,GAAyCvI,GAAG,CAACuD,QAAQ,CAACnF,GAAV,EAAemF,QAAQ,CAACjF,MAAxB,CAAjD,CAAxC,GAA4HiF,QAAQ,CAAC2E,UAAD,CAA7J,CADS;QAEjBlM,KAAK,EAAEqB,KAAK,CAACxB,QAAN,CAAeG,KAAf,IAAwB,CAAC,KAAD,EAAQ,QAAR,EAAkBT,QAAlB,CAA2BJ,SAA3B,IAAwC,KAAKiN,IAAI,KAAK,CAAT,IAAcC,IAAI,KAAK,CAAvB,GAA2BD,IAAI,GAAGC,IAAlC,GAAyCrI,GAAG,CAACuD,QAAQ,CAAChF,IAAV,EAAgBgF,QAAQ,CAAClF,KAAzB,CAAjD,CAAxC,GAA4HkF,QAAQ,CAAC4E,SAAD,CAA5J;MAFU,CAAnB;MAIAH,KAAK,IAAI,IAAT,GAAgB,KAAK,CAArB,GAAyBA,KAAK,CAAC,EAAE,GAAGQ,UAAL;QAC7B,GAAGnL;MAD0B,CAAD,CAA9B;MAGA,OAAO;QACLS,IAAI,EAAE;UACJuF,IAAI,EAAE;QADF,CADD;QAILtF,KAAK,EAAE;UACLV,KAAK,EAAE;QADF;MAJF,CAAP;IAQD;;EAtDI,CAAP;AAyDD,CA9DD;;AAgEA,MAAMoL,MAAM,GAAG,UAAU5J,OAAV,EAAmB;EAChC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IACtBA,OAAO,GAAG,EAAV;EACD;;EAED,OAAO;IACL1B,IAAI,EAAE,QADD;IAEL0B,OAFK;;IAIL,MAAMlB,EAAN,CAASiB,mBAAT,EAA8B;MAC5B,IAAI8J,qBAAJ,EAA2BC,qBAA3B;;MAEA,MAAM;QACJxN,SADI;QAEJ8C,QAFI;QAGJZ,KAHI;QAIJV,QAJI;QAKJF,QALI;QAMJe;MANI,IAOFoB,mBAPJ,CAH4B,CAUH;MACzB;MACA;;MAEA,MAAM;QACJT,OAAO,GAAG,CADN;QAEJpC,CAFI;QAGJG;MAHI,IAIF2C,OAJJ;;MAMA,IAAI,CAAC6J,qBAAqB,GAAGlL,cAAc,CAACiL,MAAxC,KAAmD,IAAnD,IAA2DC,qBAAqB,CAACrF,IAArF,EAA2F;QACzF,OAAO,EAAP;MACD;;MAED,MAAMuF,QAAQ,GAAGnK,gBAAgB,CAAC,MAAM9B,QAAQ,CAACgD,qDAAT,CAA+D;QACrGjB,IAAI,EAAErB,KAAK,CAACzB,SADyF;QAErGgE,YAAY,EAAE,MAAMjD,QAAQ,CAACkD,eAAT,CAAyB;UAC3CT,OAAO,EAAEnB,QAAQ,CAACpC;QADyB,CAAzB,CAFiF;QAKrGY;MALqG,CAA/D,CAAP,CAAjC;MAOA,MAAMoM,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW,CAACJ,qBAAqB,GAAG,OAAOhM,QAAQ,CAACqM,cAAT,IAA2B,IAA3B,GAAkC,KAAK,CAAvC,GAA2CrM,QAAQ,CAACqM,cAAT,CAAwB;QAChI5J,OAAO,EAAEnB,QAAQ,CAACrC;MAD8G,CAAxB,CAAlD,CAAzB,KAEvB,IAFuB,GAEhB+M,qBAFgB,GAEQ,EAFnB,CAApB;MAGA,MAAMzJ,aAAa,GAAGV,wBAAwB,CAACL,OAAD,CAA9C;;MAEA,SAAS8K,qBAAT,GAAiC;QAC/B;QACA,IAAIJ,WAAW,CAACvM,MAAZ,KAAuB,CAAvB,IAA4BuM,WAAW,CAAC,CAAD,CAAX,CAAetK,IAAf,GAAsBsK,WAAW,CAAC,CAAD,CAAX,CAAexK,KAAjE,IAA0EtC,CAAC,IAAI,IAA/E,IAAuFG,CAAC,IAAI,IAAhG,EAAsG;UACpG,IAAIgN,iBAAJ,CADoG,CAGpG;;;UACA,OAAO,CAACA,iBAAiB,GAAGL,WAAW,CAACxE,IAAZ,CAAiB3F,IAAI,IAAI3C,CAAC,GAAG2C,IAAI,CAACH,IAAL,GAAYW,aAAa,CAACX,IAA9B,IAAsCxC,CAAC,GAAG2C,IAAI,CAACL,KAAL,GAAaa,aAAa,CAACb,KAArE,IAA8EnC,CAAC,GAAGwC,IAAI,CAACN,GAAL,GAAWc,aAAa,CAACd,GAA3G,IAAkHlC,CAAC,GAAGwC,IAAI,CAACJ,MAAL,GAAcY,aAAa,CAACZ,MAA3K,CAArB,KAA4M,IAA5M,GAAmN4K,iBAAnN,GAAuON,QAA9O;QACD,CAP8B,CAO7B;;;QAGF,IAAIC,WAAW,CAACvM,MAAZ,IAAsB,CAA1B,EAA6B;UAC3B,IAAIhB,wBAAwB,CAACH,SAAD,CAAxB,KAAwC,GAA5C,EAAiD;YAC/C,MAAMgO,SAAS,GAAGN,WAAW,CAAC,CAAD,CAA7B;YACA,MAAMO,QAAQ,GAAGP,WAAW,CAACA,WAAW,CAACvM,MAAZ,GAAqB,CAAtB,CAA5B;YACA,MAAM+M,KAAK,GAAGnO,gBAAgB,CAACC,SAAD,CAAhB,KAAgC,KAA9C;YACA,MAAMiD,GAAG,GAAG+K,SAAS,CAAC/K,GAAtB;YACA,MAAME,MAAM,GAAG8K,QAAQ,CAAC9K,MAAxB;YACA,MAAMC,IAAI,GAAG8K,KAAK,GAAGF,SAAS,CAAC5K,IAAb,GAAoB6K,QAAQ,CAAC7K,IAA/C;YACA,MAAMF,KAAK,GAAGgL,KAAK,GAAGF,SAAS,CAAC9K,KAAb,GAAqB+K,QAAQ,CAAC/K,KAAjD;YACA,MAAMrC,KAAK,GAAGqC,KAAK,GAAGE,IAAtB;YACA,MAAMpC,MAAM,GAAGmC,MAAM,GAAGF,GAAxB;YACA,OAAO;cACLA,GADK;cAELE,MAFK;cAGLC,IAHK;cAILF,KAJK;cAKLrC,KALK;cAMLG,MANK;cAOLJ,CAAC,EAAEwC,IAPE;cAQLrC,CAAC,EAAEkC;YARE,CAAP;UAUD;;UAED,MAAMkL,eAAe,GAAGpO,gBAAgB,CAACC,SAAD,CAAhB,KAAgC,MAAxD;UACA,MAAMoO,QAAQ,GAAGvJ,GAAG,CAAC,GAAG6I,WAAW,CAACW,GAAZ,CAAgB9K,IAAI,IAAIA,IAAI,CAACL,KAA7B,CAAJ,CAApB;UACA,MAAMoL,OAAO,GAAG3J,GAAG,CAAC,GAAG+I,WAAW,CAACW,GAAZ,CAAgB9K,IAAI,IAAIA,IAAI,CAACH,IAA7B,CAAJ,CAAnB;UACA,MAAMmL,YAAY,GAAGb,WAAW,CAAC3L,MAAZ,CAAmBwB,IAAI,IAAI4K,eAAe,GAAG5K,IAAI,CAACH,IAAL,KAAckL,OAAjB,GAA2B/K,IAAI,CAACL,KAAL,KAAekL,QAApF,CAArB;UACA,MAAMnL,GAAG,GAAGsL,YAAY,CAAC,CAAD,CAAZ,CAAgBtL,GAA5B;UACA,MAAME,MAAM,GAAGoL,YAAY,CAACA,YAAY,CAACpN,MAAb,GAAsB,CAAvB,CAAZ,CAAsCgC,MAArD;UACA,MAAMC,IAAI,GAAGkL,OAAb;UACA,MAAMpL,KAAK,GAAGkL,QAAd;UACA,MAAMvN,KAAK,GAAGqC,KAAK,GAAGE,IAAtB;UACA,MAAMpC,MAAM,GAAGmC,MAAM,GAAGF,GAAxB;UACA,OAAO;YACLA,GADK;YAELE,MAFK;YAGLC,IAHK;YAILF,KAJK;YAKLrC,KALK;YAMLG,MANK;YAOLJ,CAAC,EAAEwC,IAPE;YAQLrC,CAAC,EAAEkC;UARE,CAAP;QAUD;;QAED,OAAOwK,QAAP;MACD;;MAED,OAAO;QACL9K,IAAI,EAAE;UACJuF,IAAI,EAAE;QADF,CADD;QAILtF,KAAK,EAAE;UACLV,KAAK,EAAE,MAAMV,QAAQ,CAACW,eAAT,CAAyB;YACpC1B,SAAS,EAAE;cACTqN;YADS,CADyB;YAIpCpN,QAAQ,EAAEoC,QAAQ,CAACpC,QAJiB;YAKpCY;UALoC,CAAzB;QADR;MAJF,CAAP;IAcD;;EAhHI,CAAP;AAmHD,CAxHD;;AA0HA,SAAS4D,KAAT,EAAgBwC,aAAhB,EAA+BtG,eAA/B,EAAgDoC,cAAhD,EAAgE8F,IAAhE,EAAsEsB,IAAtE,EAA4E0C,MAA5E,EAAoFtB,UAApF,EAAgG/F,MAAhG,EAAwG3C,gBAAxG,EAA0HmI,KAA1H,EAAiIkB,IAAjI"},"metadata":{},"sourceType":"module"}